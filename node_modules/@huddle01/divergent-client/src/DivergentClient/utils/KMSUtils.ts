const KMSUtils = {
  generateIdentityKey: async () => {
    let key = await window.crypto.subtle.generateKey(
      {
        name: "AES-GCM",
        length: 256,
      },
      true,
      ["encrypt", "decrypt"]
    );
    const rawKeyBuf = await window.crypto.subtle.exportKey("raw", key);
    const rawKeyArr = new Uint8Array(rawKeyBuf);
    return Buffer.from(rawKeyArr).toString("hex");
  },
  aesGcmEncrypt: async (secretKey: string, signature: string) => {
    const pwUtf8 = new TextEncoder().encode(signature);
    const pwHash = await window.crypto.subtle.digest("SHA-256", pwUtf8);
    const iv = await window.crypto.getRandomValues(new Uint8Array(12));
    const ivStr = Array.from(iv)
      .map((b) => String.fromCharCode(b))
      .join("");
    const alg = { name: "AES-GCM", iv: iv };
    const key = await window.crypto.subtle.importKey(
      "raw",
      pwHash,
      alg,
      false,
      ["encrypt"]
    );
    const ptUint8 = new TextEncoder().encode(secretKey);
    const ctBuffer = await window.crypto.subtle.encrypt(alg, key, ptUint8);
    const ctArray = Array.from(new Uint8Array(ctBuffer));
    const ctStr = ctArray.map((byte) => String.fromCharCode(byte)).join("");
    return btoa(ivStr + ctStr);
  },
  aesGcmDecrypt: async (cipherKey: string, signature: string) => {
    const pwUtf8 = new TextEncoder().encode(signature);
    const pwHash = await window.crypto.subtle.digest("SHA-256", pwUtf8);
    const ivStr = atob(cipherKey).slice(0, 12);
    const iv = new Uint8Array(Array.from(ivStr).map((ch) => ch.charCodeAt(0)));
    const alg = { name: "AES-GCM", iv: iv };
    const key = await window.crypto.subtle.importKey(
      "raw",
      pwHash,
      alg,
      false,
      ["decrypt"]
    );
    const ctStr = atob(cipherKey).slice(12);
    const ctUint8 = new Uint8Array(
      Array.from(ctStr).map((ch) => ch.charCodeAt(0))
    );

    try {
      const plainBuffer = await window.crypto.subtle.decrypt(alg, key, ctUint8);
      return new TextDecoder().decode(plainBuffer);
    } catch (error) {
      throw new Error("decrypt failed");
    }
  },
};
export default KMSUtils;
