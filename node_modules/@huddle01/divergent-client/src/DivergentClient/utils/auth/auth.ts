import axios from "axios";

export const walletAuth = {
  _generateSignatureMessage: async (walletAddress: string) => {
    const identityProviderResponse = await axios.get(
      `https://api.identity.testing.huddle01.com/sign-message?address=${walletAddress}`
    );
    return identityProviderResponse.data.message;
  },

  verifySignature: async (
    walletAddress: string,
    signMessage: string,
    signature: string
  ) => {
    const apiResponse = await axios.post(
      "https://api.identity.testing.huddle01.com/login",
      {
        address: walletAddress,
        signature: signature,
        message: signMessage,
        walletType: "ethereum",
        platformOrigin: "web-platform",
      }
    );
    return apiResponse.data;
  },
};

export const lensAuth = {
  getSignatureMessage: async (address: string) => {
    const apiResponse = await axios.post("https://api.lens.dev", {
      query: `query Challenge($address: EthereumAddress!) {
              challenge(request: { address: $address }) {
              text
            }
        }`,
      variables: {
        address,
      },
    });
    return apiResponse.data.data.challenge.text;
  },
  getTokens: async (address: string, signature: string) => {
    const apiResponse = await axios.post(
      "https://api.identity.testing.huddle01.com/login-did",
      {
        didAccessToken: signature,
        address: address,
        walletType: "lens",
        platformOrigin: "web-platform",
      }
    );
    return apiResponse.data;
  },
  getHandle: async (address: string) => {
    const apiResponse = await axios.post("https://api.lens.dev", {
      query: `query Profiles($address: EthereumAddress!) {
       profiles(request: { ownedBy: [$address], limit: 10 }) {
         items {
           id
           name
           handle
         }
       }
     }`,
      variables: {
        address,
      },
    });
    return apiResponse.data.data.profiles.items[0].handle;
  },
};
