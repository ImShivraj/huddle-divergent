import * as zustand from 'zustand';
import { GetState } from 'zustand';
import * as simple_peer from 'simple-peer';
import simple_peer__default, { SignalData } from 'simple-peer';
import React, { FunctionComponent } from 'react';
import { Socket } from 'socket.io-client';

declare type IErrorType = "userNotFound" | "conversationNotFound" | "sendError" | "deleteError" | "callError" | "noLens" | "groupError" | "signRejected" | null;
interface IUserInfo$1 {
    uid: string;
    socket: string;
    node: string;
    avatarUrl: string;
    messages: Array<[]>;
}
interface IMessage$1 {
    _id?: string;
    to: string;
    from: string;
    message: string;
    timestamp: string;
    verner?: {
        keys: {
            [participant: string]: string;
        };
        nonce: string;
    };
}
interface IConversations {
    [channel: string]: IMessage$1[];
}
interface IGroup {
    [channel: string]: {
        name: string;
        participants: string[];
        creator: string;
        messages: IMessage$1[];
    };
}

declare const useDivergentStore: zustand.UseBoundStore<Omit<zustand.StoreApi<{
    errorType: IErrorType;
    errorMessage?: string | undefined;
    setError: (type: IErrorType, msg: string) => void;
    user: IUserInfo$1;
    connection: any;
    peer: any;
    conversations: IConversations;
    groups: IGroup;
    syncMessages: IMessage$1[];
    incorrectKeys: Boolean;
    setPeer: (peer: any) => void;
    setUser: (user: IUserInfo$1) => void;
    setConnection: (peer: any) => void;
    setConversation: (channel: string, conversation: any) => void;
    setGroups: (id: string, group: IGroup) => void;
    removeGroup: (id: string) => void;
    setIncorrectKeys: (value: Boolean) => void;
    addMessage: (channel: string, message: IMessage$1, type: "conversation" | "group") => void;
    addSyncMessage: (message: IMessage$1) => void;
    micState: {
        mediaDevice: MediaDeviceInfo | undefined;
        stream: MediaStream | undefined;
        streamError: {
            type: string;
            blocked: boolean;
        } | null;
        deviceLoading: boolean;
    };
    enableAudioStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
    setAudioDevice: (device: MediaDeviceInfo) => void;
    getAudioDevices: () => Promise<MediaDeviceInfo[]>;
    setAudioStream: (stream: MediaStream | undefined) => void;
    pauseAudioTracks: () => void;
    switchAudioStream: (stream: MediaStream | undefined) => void;
    setAudioDeviceLoading: (loading: boolean) => void;
    setAudioStreamError: (error: string) => void;
    mediaDevice: MediaDeviceInfo | undefined;
    stream: MediaStream | undefined;
    streamError: {
        type: string;
        blocked: boolean;
    } | undefined;
    deviceLoading: boolean;
    streamsArry: MediaStream[];
    enableStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
    setMediaDevice: (device: MediaDeviceInfo) => void;
    getMediaDevices: () => Promise<MediaDeviceInfo[]>;
    setMediaStream: (stream: MediaStream | undefined) => void;
    pauseTracks: () => void;
    switchMediaStream: (stream: MediaStream | undefined) => void;
    setDeviceLoading: (loading: boolean) => void;
    setStreamError: (error: string) => void;
    callerUid?: string | undefined;
    setCallerUid: (callerUid: string) => void;
    callerSignal: string | simple_peer.SignalData | null;
    setCallerSignal: (callerSignal: simple_peer.SignalData | null) => void;
    callerStream: MediaStream | null;
    setCallerStream: (callerStream: MediaStream | null) => void;
}>, "setState"> & {
    setState(partial: {
        errorType: IErrorType;
        errorMessage?: string | undefined;
        setError: (type: IErrorType, msg: string) => void;
        user: IUserInfo$1;
        connection: any;
        peer: any;
        conversations: IConversations;
        groups: IGroup;
        syncMessages: IMessage$1[];
        incorrectKeys: Boolean;
        setPeer: (peer: any) => void;
        setUser: (user: IUserInfo$1) => void;
        setConnection: (peer: any) => void;
        setConversation: (channel: string, conversation: any) => void;
        setGroups: (id: string, group: IGroup) => void;
        removeGroup: (id: string) => void;
        setIncorrectKeys: (value: Boolean) => void;
        addMessage: (channel: string, message: IMessage$1, type: "conversation" | "group") => void;
        addSyncMessage: (message: IMessage$1) => void;
        micState: {
            mediaDevice: MediaDeviceInfo | undefined;
            stream: MediaStream | undefined;
            streamError: {
                type: string;
                blocked: boolean;
            } | null;
            deviceLoading: boolean;
        };
        enableAudioStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setAudioDevice: (device: MediaDeviceInfo) => void;
        getAudioDevices: () => Promise<MediaDeviceInfo[]>;
        setAudioStream: (stream: MediaStream | undefined) => void;
        pauseAudioTracks: () => void;
        switchAudioStream: (stream: MediaStream | undefined) => void;
        setAudioDeviceLoading: (loading: boolean) => void;
        setAudioStreamError: (error: string) => void;
        mediaDevice: MediaDeviceInfo | undefined;
        stream: MediaStream | undefined;
        streamError: {
            type: string;
            blocked: boolean;
        } | undefined;
        deviceLoading: boolean;
        streamsArry: MediaStream[];
        enableStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setMediaDevice: (device: MediaDeviceInfo) => void;
        getMediaDevices: () => Promise<MediaDeviceInfo[]>;
        setMediaStream: (stream: MediaStream | undefined) => void;
        pauseTracks: () => void;
        switchMediaStream: (stream: MediaStream | undefined) => void;
        setDeviceLoading: (loading: boolean) => void;
        setStreamError: (error: string) => void;
        callerUid?: string | undefined;
        setCallerUid: (callerUid: string) => void;
        callerSignal: string | simple_peer.SignalData | null;
        setCallerSignal: (callerSignal: simple_peer.SignalData | null) => void;
        callerStream: MediaStream | null;
        setCallerStream: (callerStream: MediaStream | null) => void;
    } | Partial<{
        errorType: IErrorType;
        errorMessage?: string | undefined;
        setError: (type: IErrorType, msg: string) => void;
        user: IUserInfo$1;
        connection: any;
        peer: any;
        conversations: IConversations;
        groups: IGroup;
        syncMessages: IMessage$1[];
        incorrectKeys: Boolean;
        setPeer: (peer: any) => void;
        setUser: (user: IUserInfo$1) => void;
        setConnection: (peer: any) => void;
        setConversation: (channel: string, conversation: any) => void;
        setGroups: (id: string, group: IGroup) => void;
        removeGroup: (id: string) => void;
        setIncorrectKeys: (value: Boolean) => void;
        addMessage: (channel: string, message: IMessage$1, type: "conversation" | "group") => void;
        addSyncMessage: (message: IMessage$1) => void;
        micState: {
            mediaDevice: MediaDeviceInfo | undefined;
            stream: MediaStream | undefined;
            streamError: {
                type: string;
                blocked: boolean;
            } | null;
            deviceLoading: boolean;
        };
        enableAudioStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setAudioDevice: (device: MediaDeviceInfo) => void;
        getAudioDevices: () => Promise<MediaDeviceInfo[]>;
        setAudioStream: (stream: MediaStream | undefined) => void;
        pauseAudioTracks: () => void;
        switchAudioStream: (stream: MediaStream | undefined) => void;
        setAudioDeviceLoading: (loading: boolean) => void;
        setAudioStreamError: (error: string) => void;
        mediaDevice: MediaDeviceInfo | undefined;
        stream: MediaStream | undefined;
        streamError: {
            type: string;
            blocked: boolean;
        } | undefined;
        deviceLoading: boolean;
        streamsArry: MediaStream[];
        enableStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setMediaDevice: (device: MediaDeviceInfo) => void;
        getMediaDevices: () => Promise<MediaDeviceInfo[]>;
        setMediaStream: (stream: MediaStream | undefined) => void;
        pauseTracks: () => void;
        switchMediaStream: (stream: MediaStream | undefined) => void;
        setDeviceLoading: (loading: boolean) => void;
        setStreamError: (error: string) => void;
        callerUid?: string | undefined;
        setCallerUid: (callerUid: string) => void;
        callerSignal: string | simple_peer.SignalData | null;
        setCallerSignal: (callerSignal: simple_peer.SignalData | null) => void;
        callerStream: MediaStream | null;
        setCallerStream: (callerStream: MediaStream | null) => void;
    }> | ((state: {
        errorType: IErrorType;
        errorMessage?: string | undefined;
        setError: (type: IErrorType, msg: string) => void;
        user: IUserInfo$1;
        connection: any;
        peer: any;
        conversations: IConversations;
        groups: IGroup;
        syncMessages: IMessage$1[];
        incorrectKeys: Boolean;
        setPeer: (peer: any) => void;
        setUser: (user: IUserInfo$1) => void;
        setConnection: (peer: any) => void;
        setConversation: (channel: string, conversation: any) => void;
        setGroups: (id: string, group: IGroup) => void;
        removeGroup: (id: string) => void;
        setIncorrectKeys: (value: Boolean) => void;
        addMessage: (channel: string, message: IMessage$1, type: "conversation" | "group") => void;
        addSyncMessage: (message: IMessage$1) => void;
        micState: {
            mediaDevice: MediaDeviceInfo | undefined;
            stream: MediaStream | undefined;
            streamError: {
                type: string;
                blocked: boolean;
            } | null;
            deviceLoading: boolean;
        };
        enableAudioStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setAudioDevice: (device: MediaDeviceInfo) => void;
        getAudioDevices: () => Promise<MediaDeviceInfo[]>;
        setAudioStream: (stream: MediaStream | undefined) => void;
        pauseAudioTracks: () => void;
        switchAudioStream: (stream: MediaStream | undefined) => void;
        setAudioDeviceLoading: (loading: boolean) => void;
        setAudioStreamError: (error: string) => void;
        mediaDevice: MediaDeviceInfo | undefined;
        stream: MediaStream | undefined;
        streamError: {
            type: string;
            blocked: boolean;
        } | undefined;
        deviceLoading: boolean;
        streamsArry: MediaStream[];
        enableStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setMediaDevice: (device: MediaDeviceInfo) => void;
        getMediaDevices: () => Promise<MediaDeviceInfo[]>;
        setMediaStream: (stream: MediaStream | undefined) => void;
        pauseTracks: () => void;
        switchMediaStream: (stream: MediaStream | undefined) => void;
        setDeviceLoading: (loading: boolean) => void;
        setStreamError: (error: string) => void;
        callerUid?: string | undefined;
        setCallerUid: (callerUid: string) => void;
        callerSignal: string | simple_peer.SignalData | null;
        setCallerSignal: (callerSignal: simple_peer.SignalData | null) => void;
        callerStream: MediaStream | null;
        setCallerStream: (callerStream: MediaStream | null) => void;
    }) => {
        errorType: IErrorType;
        errorMessage?: string | undefined;
        setError: (type: IErrorType, msg: string) => void;
        user: IUserInfo$1;
        connection: any;
        peer: any;
        conversations: IConversations;
        groups: IGroup;
        syncMessages: IMessage$1[];
        incorrectKeys: Boolean;
        setPeer: (peer: any) => void;
        setUser: (user: IUserInfo$1) => void;
        setConnection: (peer: any) => void;
        setConversation: (channel: string, conversation: any) => void;
        setGroups: (id: string, group: IGroup) => void;
        removeGroup: (id: string) => void;
        setIncorrectKeys: (value: Boolean) => void;
        addMessage: (channel: string, message: IMessage$1, type: "conversation" | "group") => void;
        addSyncMessage: (message: IMessage$1) => void;
        micState: {
            mediaDevice: MediaDeviceInfo | undefined;
            stream: MediaStream | undefined;
            streamError: {
                type: string;
                blocked: boolean;
            } | null;
            deviceLoading: boolean;
        };
        enableAudioStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setAudioDevice: (device: MediaDeviceInfo) => void;
        getAudioDevices: () => Promise<MediaDeviceInfo[]>;
        setAudioStream: (stream: MediaStream | undefined) => void;
        pauseAudioTracks: () => void;
        switchAudioStream: (stream: MediaStream | undefined) => void;
        setAudioDeviceLoading: (loading: boolean) => void;
        setAudioStreamError: (error: string) => void;
        mediaDevice: MediaDeviceInfo | undefined;
        stream: MediaStream | undefined;
        streamError: {
            type: string;
            blocked: boolean;
        } | undefined;
        deviceLoading: boolean;
        streamsArry: MediaStream[];
        enableStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setMediaDevice: (device: MediaDeviceInfo) => void;
        getMediaDevices: () => Promise<MediaDeviceInfo[]>;
        setMediaStream: (stream: MediaStream | undefined) => void;
        pauseTracks: () => void;
        switchMediaStream: (stream: MediaStream | undefined) => void;
        setDeviceLoading: (loading: boolean) => void;
        setStreamError: (error: string) => void;
        callerUid?: string | undefined;
        setCallerUid: (callerUid: string) => void;
        callerSignal: string | simple_peer.SignalData | null;
        setCallerSignal: (callerSignal: simple_peer.SignalData | null) => void;
        callerStream: MediaStream | null;
        setCallerStream: (callerStream: MediaStream | null) => void;
    } | Partial<{
        errorType: IErrorType;
        errorMessage?: string | undefined;
        setError: (type: IErrorType, msg: string) => void;
        user: IUserInfo$1;
        connection: any;
        peer: any;
        conversations: IConversations;
        groups: IGroup;
        syncMessages: IMessage$1[];
        incorrectKeys: Boolean;
        setPeer: (peer: any) => void;
        setUser: (user: IUserInfo$1) => void;
        setConnection: (peer: any) => void;
        setConversation: (channel: string, conversation: any) => void;
        setGroups: (id: string, group: IGroup) => void;
        removeGroup: (id: string) => void;
        setIncorrectKeys: (value: Boolean) => void;
        addMessage: (channel: string, message: IMessage$1, type: "conversation" | "group") => void;
        addSyncMessage: (message: IMessage$1) => void;
        micState: {
            mediaDevice: MediaDeviceInfo | undefined;
            stream: MediaStream | undefined;
            streamError: {
                type: string;
                blocked: boolean;
            } | null;
            deviceLoading: boolean;
        };
        enableAudioStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setAudioDevice: (device: MediaDeviceInfo) => void;
        getAudioDevices: () => Promise<MediaDeviceInfo[]>;
        setAudioStream: (stream: MediaStream | undefined) => void;
        pauseAudioTracks: () => void;
        switchAudioStream: (stream: MediaStream | undefined) => void;
        setAudioDeviceLoading: (loading: boolean) => void;
        setAudioStreamError: (error: string) => void;
        mediaDevice: MediaDeviceInfo | undefined;
        stream: MediaStream | undefined;
        streamError: {
            type: string;
            blocked: boolean;
        } | undefined;
        deviceLoading: boolean;
        streamsArry: MediaStream[];
        enableStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
        setMediaDevice: (device: MediaDeviceInfo) => void;
        getMediaDevices: () => Promise<MediaDeviceInfo[]>;
        setMediaStream: (stream: MediaStream | undefined) => void;
        pauseTracks: () => void;
        switchMediaStream: (stream: MediaStream | undefined) => void;
        setDeviceLoading: (loading: boolean) => void;
        setStreamError: (error: string) => void;
        callerUid?: string | undefined;
        setCallerUid: (callerUid: string) => void;
        callerSignal: string | simple_peer.SignalData | null;
        setCallerSignal: (callerSignal: simple_peer.SignalData | null) => void;
        callerStream: MediaStream | null;
        setCallerStream: (callerStream: MediaStream | null) => void;
    }>), replace?: boolean | undefined, actionType?: string | {
        type: unknown;
    } | undefined): void;
}>;
declare const getState: GetState<{
    errorType: IErrorType;
    errorMessage?: string | undefined;
    setError: (type: IErrorType, msg: string) => void;
    user: IUserInfo$1;
    connection: any;
    peer: any;
    conversations: IConversations;
    groups: IGroup;
    syncMessages: IMessage$1[];
    incorrectKeys: Boolean;
    setPeer: (peer: any) => void;
    setUser: (user: IUserInfo$1) => void;
    setConnection: (peer: any) => void;
    setConversation: (channel: string, conversation: any) => void;
    setGroups: (id: string, group: IGroup) => void;
    removeGroup: (id: string) => void;
    setIncorrectKeys: (value: Boolean) => void;
    addMessage: (channel: string, message: IMessage$1, type: "conversation" | "group") => void;
    addSyncMessage: (message: IMessage$1) => void;
    micState: {
        mediaDevice: MediaDeviceInfo | undefined;
        stream: MediaStream | undefined;
        streamError: {
            type: string;
            blocked: boolean;
        } | null;
        deviceLoading: boolean;
    };
    enableAudioStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
    setAudioDevice: (device: MediaDeviceInfo) => void;
    getAudioDevices: () => Promise<MediaDeviceInfo[]>;
    setAudioStream: (stream: MediaStream | undefined) => void;
    pauseAudioTracks: () => void;
    switchAudioStream: (stream: MediaStream | undefined) => void;
    setAudioDeviceLoading: (loading: boolean) => void;
    setAudioStreamError: (error: string) => void;
    mediaDevice: MediaDeviceInfo | undefined;
    stream: MediaStream | undefined;
    streamError: {
        type: string;
        blocked: boolean;
    } | undefined;
    deviceLoading: boolean;
    streamsArry: MediaStream[];
    enableStream: (constraints?: MediaStreamConstraints | undefined) => Promise<void>;
    setMediaDevice: (device: MediaDeviceInfo) => void;
    getMediaDevices: () => Promise<MediaDeviceInfo[]>;
    setMediaStream: (stream: MediaStream | undefined) => void;
    pauseTracks: () => void;
    switchMediaStream: (stream: MediaStream | undefined) => void;
    setDeviceLoading: (loading: boolean) => void;
    setStreamError: (error: string) => void;
    callerUid?: string | undefined;
    setCallerUid: (callerUid: string) => void;
    callerSignal: string | simple_peer.SignalData | null;
    setCallerSignal: (callerSignal: simple_peer.SignalData | null) => void;
    callerStream: MediaStream | null;
    setCallerStream: (callerStream: MediaStream | null) => void;
}>;

declare type GetDivergentStoreType = typeof getState;

interface IMessage {
    to: string;
    from: string;
    message: string;
    timestamp: string;
    verner?: {
        keys: {
            [participant: string]: string;
        };
        nonce: string;
    };
}
interface IUserInfo {
    uid: string;
    socket: string;
    node: string;
    avatarUrl: string;
    messages: Array<[]>;
}

interface ServerToClientEvents {
    "update-peer": (data: IUserInfo) => void;
    call: (data: {
        signal: SignalData;
        from: string;
        fromUid: string;
    }) => void;
    answer: (signal: SignalData) => void;
    "get-conversations": (conversation: {
        channel: string;
        messages: any;
        type: "conversation" | "group" | "remove";
    }) => void;
    "new-message-async": (data: {
        channel: string;
        message: IMessage;
        type: "conversation" | "group";
    }) => void;
    "end-call": () => void;
    error: (data: {
        type: IErrorType;
        msg: string;
    }) => void;
}
interface ClientToServerEvents {
    "@dummy": (data: {
        message: string;
    }) => void;
    "@update-peer": (data: {
        uid: string;
        id: string;
        type: string;
        avatar?: string;
        identityKey?: string;
        publicKey?: string;
        secretKey?: string;
    }) => void;
    "@call": (data: {
        peerToCall: string;
        signalData: SignalData;
        from: string;
    }) => void;
    "@answer": (data: {
        signal: SignalData;
        to?: string;
    }) => void;
    "@start-conversation": (data: {
        p1: string;
        p2: string;
    }) => void;
    "@create-group": (data: {
        name: string;
        creator: string;
    }) => void;
    "@leave-group": (data: {
        groupId: string;
        participant: string;
    }) => void;
    "@send-message": (data: {
        payload: IMessage;
        type: "conversation" | "group";
    }) => void;
    "@get-conversations": (data: {
        uid: string;
    }) => void;
    "@update-group-participants": (data: {
        participant: string;
        groupId: string;
        type: "add" | "remove";
    }) => void;
    "@end": (data: {
        peerToEnd: string | undefined;
    }) => void;
}

declare class DivergentStore {
    static init(get: GetDivergentStoreType): void;
    getPeer(): any;
    enableAudioStream(): Promise<void>;
    disableAudioStream(): Promise<void>;
    getUser(): IUserInfo$1;
    getMicStream(): MediaStream | undefined;
    getCallerSignal(): string | simple_peer__default.SignalData | null;
    getCallerUid(): string | undefined;
    getConversations(): IConversations;
    getSyncMessages(): IMessage$1[];
    setUser(user: IUserInfo$1): void;
    setCallerUid(uid: string): void;
    setPeer(peer: simple_peer__default.Instance | null): void;
    setCallerSignal(signal: any): void;
    setCallerStream(stream: MediaStream | null): void;
    setConnection(peer: simple_peer__default.Instance | null): void;
    setConversation(channel: string, conversation: IMessage$1[]): void;
    setGroups(channel: string, group: IGroup): void;
    removeGroup(id: string): void;
    setError(type: IErrorType, msg: string): void;
    setIncorrectKeys(value: Boolean): void;
    addMessage(channel: string, message: IMessage$1, type: "conversation" | "group"): void;
    addSyncMessage(message: IMessage$1): void;
}
declare class DivergentSocketClient extends DivergentStore {
    socket: Socket<ServerToClientEvents, ClientToServerEvents> | undefined;
    rpcEndpoint: string;
    constructor(rpcEndpoint: string);
}
declare class DivergentClient extends DivergentSocketClient {
    private secretKey;
    publicKey: string | undefined;
    constructor(rpcEndpoint: string);
    _getAndListenConversations: (uid: string) => void;
    start: () => Promise<void>;
    _getUserKey: (uid: string, type: "publicKey" | "secretKey") => Promise<any>;
    _loginWithWallet: () => Promise<void>;
    _loginWithLens: () => Promise<void>;
    _handleAuth: (uid: string, signMessage: string, signature: string) => Promise<void>;
    _handleKMSAuth: (uid: string) => Promise<void>;
    init: (type: "wallet" | "lens") => Promise<void>;
    changeAvatar: (uid: string, avatarUrl: string) => Promise<void>;
    dial: (toId: string) => Promise<unknown>;
    answer: () => Promise<unknown>;
    end: () => void;
    muteMic: () => Promise<void>;
    unmuteMic: () => Promise<void>;
    startConversation: (address: string) => void;
    createGroup: (name: string) => void;
    leaveGroup: (groupId: string) => void;
    _getOtherPublicKey: (to: string, from: string) => Promise<any>;
    sendMessageAsync: (payload: Omit<IMessage$1, "verner">, type: "conversation" | "group") => Promise<void>;
    addGroupParticipant: (groupId: string, participant: string) => void;
    removeGroupParticipant: (groupId: string, participant: string) => void;
    sendMessageSync: (msg: IMessage$1) => unknown;
    revealKeys: () => Promise<{
        publicKey: any;
        secretKey: any;
    }>;
}

declare const DivergentClientProvider: FunctionComponent<{
    children: React.ReactNode;
    value: DivergentClient;
}>;

declare const useDivergentClient: () => DivergentClient;

declare const createDivergentClient: (rpcEndpoint: string) => DivergentClient;
declare const getDivergentClient: (rpcEndpoint?: string) => DivergentClient;

export { DivergentClientProvider, createDivergentClient, getDivergentClient, useDivergentClient, useDivergentStore };
