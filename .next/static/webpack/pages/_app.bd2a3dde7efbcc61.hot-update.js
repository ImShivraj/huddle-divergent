"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ App; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/globals.css */ \"./styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _rainbow_me_rainbowkit_styles_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @rainbow-me/rainbowkit/styles.css */ \"./node_modules/@rainbow-me/rainbowkit/dist/index.css\");\n/* harmony import */ var _rainbow_me_rainbowkit_styles_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_rainbow_me_rainbowkit_styles_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _rainbow_me_rainbowkit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @rainbow-me/rainbowkit */ \"./node_modules/@rainbow-me/rainbowkit/dist/index.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! wagmi */ \"./node_modules/wagmi/dist/index.js\");\n/* harmony import */ var wagmi_providers_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! wagmi/providers/public */ \"./node_modules/wagmi/dist/providers/public.js\");\n/* harmony import */ var _huddle01_divergent_av__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @huddle01/divergent-av */ \"./node_modules/@huddle01/divergent-av/dist/index.mjs\");\n\n\n\n\n\n\n\nconst { chains , provider  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_4__.configureChains)([\n    wagmi__WEBPACK_IMPORTED_MODULE_4__.chain.mainnet,\n    wagmi__WEBPACK_IMPORTED_MODULE_4__.chain.goerli,\n    wagmi__WEBPACK_IMPORTED_MODULE_4__.chain.polygon,\n    wagmi__WEBPACK_IMPORTED_MODULE_4__.chain.optimism,\n    wagmi__WEBPACK_IMPORTED_MODULE_4__.chain.arbitrum,\n    wagmi__WEBPACK_IMPORTED_MODULE_4__.chain.hardhat\n], [\n    // alchemyProvider({ apiKey: process.env.ALCHEMY_ID }),\n    (0,wagmi_providers_public__WEBPACK_IMPORTED_MODULE_5__.publicProvider)()\n]);\nconst { connectors  } = (0,_rainbow_me_rainbowkit__WEBPACK_IMPORTED_MODULE_6__.getDefaultWallets)({\n    appName: \"My RainbowKit App\",\n    chains\n});\nconst wagmiClient = (0,wagmi__WEBPACK_IMPORTED_MODULE_4__.createClient)({\n    autoConnect: false,\n    connectors,\n    provider\n});\nconst divergentAVClient = (0,_huddle01_divergent_av__WEBPACK_IMPORTED_MODULE_3__.getDivergentAVClient)(\"https://dg-devnet.huddle01.com\");\nfunction App(param) {\n    let { Component , pageProps  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(wagmi__WEBPACK_IMPORTED_MODULE_4__.WagmiConfig, {\n        client: wagmiClient,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_rainbow_me_rainbowkit__WEBPACK_IMPORTED_MODULE_6__.RainbowKitProvider, {\n            theme: (0,_rainbow_me_rainbowkit__WEBPACK_IMPORTED_MODULE_6__.darkTheme)(),\n            chains: chains,\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_huddle01_divergent_av__WEBPACK_IMPORTED_MODULE_3__.DivergentAVClientProvider, {\n                value: divergentAVClient,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                    ...pageProps\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\hp\\\\Desktop\\\\patrix-1.0.0\\\\codes\\\\huddle-divergent\\\\pages\\\\_app.tsx\",\n                    lineNumber: 39,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\hp\\\\Desktop\\\\patrix-1.0.0\\\\codes\\\\huddle-divergent\\\\pages\\\\_app.tsx\",\n                lineNumber: 38,\n                columnNumber: 7\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\hp\\\\Desktop\\\\patrix-1.0.0\\\\codes\\\\huddle-divergent\\\\pages\\\\_app.tsx\",\n            lineNumber: 37,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\hp\\\\Desktop\\\\patrix-1.0.0\\\\codes\\\\huddle-divergent\\\\pages\\\\_app.tsx\",\n        lineNumber: 36,\n        columnNumber: 5\n    }, this);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQThCO0FBR2E7QUFDK0M7QUFDaEI7QUFFbEI7QUFDaUM7QUFHekYsTUFBTSxFQUFFVSxPQUFNLEVBQUVDLFNBQVEsRUFBRSxHQUFHUCxzREFBZUEsQ0FDMUM7SUFBQ0QsZ0RBQWE7SUFBRUEsK0NBQVk7SUFBRUEsZ0RBQWE7SUFBRUEsaURBQWM7SUFBRUEsaURBQWM7SUFBRUEsZ0RBQWE7Q0FBQyxFQUMzRjtJQUNFLHVEQUF1RDtJQUN2REksc0VBQWNBO0NBQ2Y7QUFHSCxNQUFNLEVBQUVXLFdBQVUsRUFBRSxHQUFHbEIseUVBQWlCQSxDQUFDO0lBQ3ZDbUIsU0FBUztJQUNUVDtBQUNGO0FBRUEsTUFBTVUsY0FBY2YsbURBQVlBLENBQUM7SUFDL0JnQixhQUFhLEtBQUs7SUFDbEJIO0lBQ0FQO0FBQ0Y7QUFFQSxNQUFNVyxvQkFBb0JiLDRFQUFvQkEsQ0FBQztBQUdoQyxTQUFTYyxJQUFJLEtBQWtDLEVBQUU7UUFBcEMsRUFBRUMsVUFBUyxFQUFFQyxVQUFTLEVBQVksR0FBbEM7SUFDMUIscUJBQ0UsOERBQUNuQiw4Q0FBV0E7UUFBQ29CLFFBQVFOO2tCQUNuQiw0RUFBQ25CLHNFQUFrQkE7WUFBQzBCLE9BQU96QixpRUFBU0E7WUFBSVEsUUFBUUE7c0JBQ2hELDRFQUFDRiw2RUFBeUJBO2dCQUFDb0IsT0FBT047MEJBQzlCLDRFQUFDRTtvQkFBVyxHQUFHQyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLbEMsQ0FBQztLQVZ1QkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvX2FwcC50c3g/MmZiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL3N0eWxlcy9nbG9iYWxzLmNzcydcclxuaW1wb3J0IHR5cGUgeyBBcHBQcm9wcyB9IGZyb20gJ25leHQvYXBwJ1xyXG5cclxuaW1wb3J0ICdAcmFpbmJvdy1tZS9yYWluYm93a2l0L3N0eWxlcy5jc3MnO1xyXG5pbXBvcnQgeyBnZXREZWZhdWx0V2FsbGV0cywgUmFpbmJvd0tpdFByb3ZpZGVyLCBkYXJrVGhlbWUgfSBmcm9tICdAcmFpbmJvdy1tZS9yYWluYm93a2l0JztcclxuaW1wb3J0IHsgY2hhaW4sIGNvbmZpZ3VyZUNoYWlucywgY3JlYXRlQ2xpZW50LCBXYWdtaUNvbmZpZyB9IGZyb20gJ3dhZ21pJztcclxuaW1wb3J0IHsgYWxjaGVteVByb3ZpZGVyIH0gZnJvbSAnd2FnbWkvcHJvdmlkZXJzL2FsY2hlbXknO1xyXG5pbXBvcnQgeyBwdWJsaWNQcm92aWRlciB9IGZyb20gJ3dhZ21pL3Byb3ZpZGVycy9wdWJsaWMnO1xyXG5pbXBvcnQgeyBEaXZlcmdlbnRBVkNsaWVudFByb3ZpZGVyLCBnZXREaXZlcmdlbnRBVkNsaWVudCB9IGZyb20gXCJAaHVkZGxlMDEvZGl2ZXJnZW50LWF2XCI7XHJcblxyXG5cclxuY29uc3QgeyBjaGFpbnMsIHByb3ZpZGVyIH0gPSBjb25maWd1cmVDaGFpbnMoXHJcbiAgW2NoYWluLm1haW5uZXQsIGNoYWluLmdvZXJsaSwgY2hhaW4ucG9seWdvbiwgY2hhaW4ub3B0aW1pc20sIGNoYWluLmFyYml0cnVtLCBjaGFpbi5oYXJkaGF0XSxcclxuICBbXHJcbiAgICAvLyBhbGNoZW15UHJvdmlkZXIoeyBhcGlLZXk6IHByb2Nlc3MuZW52LkFMQ0hFTVlfSUQgfSksXHJcbiAgICBwdWJsaWNQcm92aWRlcigpXHJcbiAgXVxyXG4pO1xyXG5cclxuY29uc3QgeyBjb25uZWN0b3JzIH0gPSBnZXREZWZhdWx0V2FsbGV0cyh7XHJcbiAgYXBwTmFtZTogJ015IFJhaW5ib3dLaXQgQXBwJyxcclxuICBjaGFpbnNcclxufSk7XHJcblxyXG5jb25zdCB3YWdtaUNsaWVudCA9IGNyZWF0ZUNsaWVudCh7XHJcbiAgYXV0b0Nvbm5lY3Q6IGZhbHNlLFxyXG4gIGNvbm5lY3RvcnMsXHJcbiAgcHJvdmlkZXJcclxufSlcclxuXHJcbmNvbnN0IGRpdmVyZ2VudEFWQ2xpZW50ID0gZ2V0RGl2ZXJnZW50QVZDbGllbnQoXCJodHRwczovL2RnLWRldm5ldC5odWRkbGUwMS5jb21cIik7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfTogQXBwUHJvcHMpIHtcclxuICByZXR1cm4gKFxyXG4gICAgPFdhZ21pQ29uZmlnIGNsaWVudD17d2FnbWlDbGllbnR9PlxyXG4gICAgICA8UmFpbmJvd0tpdFByb3ZpZGVyIHRoZW1lPXtkYXJrVGhlbWUoKX0gY2hhaW5zPXtjaGFpbnN9PlxyXG4gICAgICA8RGl2ZXJnZW50QVZDbGllbnRQcm92aWRlciB2YWx1ZT17ZGl2ZXJnZW50QVZDbGllbnR9PlxyXG4gICAgICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxyXG4gICAgICAgICAgPC9EaXZlcmdlbnRBVkNsaWVudFByb3ZpZGVyPlxyXG4gICAgICA8L1JhaW5ib3dLaXRQcm92aWRlcj5cclxuICAgIDwvV2FnbWlDb25maWc+XHJcbiAgKVxyXG59XHJcbiJdLCJuYW1lcyI6WyJnZXREZWZhdWx0V2FsbGV0cyIsIlJhaW5ib3dLaXRQcm92aWRlciIsImRhcmtUaGVtZSIsImNoYWluIiwiY29uZmlndXJlQ2hhaW5zIiwiY3JlYXRlQ2xpZW50IiwiV2FnbWlDb25maWciLCJwdWJsaWNQcm92aWRlciIsIkRpdmVyZ2VudEFWQ2xpZW50UHJvdmlkZXIiLCJnZXREaXZlcmdlbnRBVkNsaWVudCIsImNoYWlucyIsInByb3ZpZGVyIiwibWFpbm5ldCIsImdvZXJsaSIsInBvbHlnb24iLCJvcHRpbWlzbSIsImFyYml0cnVtIiwiaGFyZGhhdCIsImNvbm5lY3RvcnMiLCJhcHBOYW1lIiwid2FnbWlDbGllbnQiLCJhdXRvQ29ubmVjdCIsImRpdmVyZ2VudEFWQ2xpZW50IiwiQXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIiwiY2xpZW50IiwidGhlbWUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n"));

/***/ }),

/***/ "./node_modules/@huddle01/divergent-av/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@huddle01/divergent-av/dist/index.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DivergentAVClientProvider\": function() { return /* binding */ DivergentAVClient_default2; },\n/* harmony export */   \"createDivergentAVClient\": function() { return /* binding */ createDivergentAVClient; },\n/* harmony export */   \"getDivergentAVClient\": function() { return /* binding */ getDivergentAVClient; },\n/* harmony export */   \"useDivergentAVClient\": function() { return /* binding */ useDivergentAVClient; },\n/* harmony export */   \"useDivergentStore\": function() { return /* binding */ useRootStore_default; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"./node_modules/zustand/esm/index.js\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"./node_modules/zustand/esm/middleware.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! socket.io-client */ \"./node_modules/socket.io-client/build/esm/index.js\");\n/* harmony import */ var simple_peer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! simple-peer */ \"./node_modules/simple-peer/index.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! pino */ \"./node_modules/pino/browser.js\");\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tweetnacl */ \"./node_modules/tweetnacl/nacl-fast.js\");\n/* harmony import */ var ed2curve__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ed2curve */ \"./node_modules/ed2curve/ed2curve.js\");\n/* harmony import */ var tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tweetnacl-util */ \"./node_modules/tweetnacl-util/nacl-util.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/store/useRootStore.ts\n\n\n\n// src/store/createCallerSlice.ts\nvar createCallerSlice = (set) => ({\n  callerUid: void 0,\n  callerSignal: \"\",\n  callerStream: null,\n  connection: null,\n  setCallerUid: (callerUid) => set(() => ({ callerUid })),\n  setCallerSignal: (callerSignal) => set(() => ({ callerSignal })),\n  setCallerStream: (callerStream) => set(() => ({ callerStream })),\n  setConnection: (peer) => set(() => ({ connection: peer }))\n});\nvar createCallerSlice_default = createCallerSlice;\n\n// src/store/createMediaSlice.ts\nvar createMediaSlice = (set, get) => ({\n  mediaDevice: void 0,\n  stream: void 0,\n  streamError: void 0,\n  deviceLoading: true,\n  streamsArry: [],\n  enableStream: () => __async(void 0, null, function* () {\n    var _a;\n    if (get().stream) {\n      console.error({\n        type: \"error\",\n        msg: \"createMediaSlice.enableStream() | No stream\"\n      });\n      return;\n    }\n    const deviceEnabledConstrains = {\n      video: {\n        width: { ideal: 1280 },\n        height: { ideal: 720 },\n        deviceId: (_a = get().mediaDevice) == null ? void 0 : _a.deviceId\n      }\n    };\n    yield navigator.mediaDevices.getUserMedia(deviceEnabledConstrains).then((_stream) => {\n      const _newStreamArray = [...get().streamsArry, _stream];\n      set(() => ({\n        stream: _stream,\n        deviceLoading: false,\n        streamsArry: _newStreamArray\n      }));\n    }).catch((_error) => {\n      set(() => ({\n        streamError: {\n          type: _error.name,\n          blocked: true\n        },\n        deviceLoading: false\n      }));\n    });\n    if (!get().mediaDevice) {\n      const mediaDevices = yield get().getMediaDevices();\n      console.info({ mediaDevices });\n      get().setMediaDevice(mediaDevices[0]);\n    }\n  }),\n  getMediaDevices: () => __async(void 0, null, function* () {\n    const { setStreamError } = get();\n    try {\n      const mediaDevices = yield navigator.mediaDevices.enumerateDevices();\n      const devices = mediaDevices.filter(({ kind }) => kind === \"videoinput\");\n      return devices;\n    } catch (err) {\n      setStreamError(err == null ? void 0 : err.name);\n      return [];\n    }\n  }),\n  setMediaDevice: (device) => {\n    set(() => ({\n      mediaDevice: device\n    }));\n    console.info(\"set\");\n  },\n  switchMediaStream: (stream) => {\n    console.info({\n      type: \"info\",\n      msg: \"switchMediaStream() | Switching media stream\"\n    });\n    if (!stream) {\n      console.info({\n        type: \"info\",\n        msg: \"switchMediaStream() | No stream Found using default Stream\"\n      });\n      return;\n    }\n    get().pauseTracks();\n    get().setMediaStream(stream);\n  },\n  setMediaStream: (stream) => {\n    console.info({\n      type: \"info\",\n      msg: \"setMediaStream() | Setting media stream\",\n      stream\n    });\n    set(() => ({ stream }));\n  },\n  pauseTracks: () => {\n    const { stream } = get();\n    if (!stream)\n      return;\n    get().streamsArry.forEach((stream2) => {\n      stream2.getTracks().forEach((track) => {\n        track.stop();\n      });\n    });\n    stream.getTracks().forEach((track) => track.stop());\n    set(() => ({ stream: void 0, streamsArry: [] }));\n  },\n  setDeviceLoading: (loading) => {\n    set(() => ({ deviceLoading: loading }));\n  },\n  setStreamError: (error) => {\n    set(() => ({\n      streamError: {\n        type: error || \"UnknownError\",\n        blocked: error === \"NotAllowedError\"\n      }\n    }));\n  }\n});\nvar createMediaSlice_default = createMediaSlice;\n\n// src/store/createMicSlice.ts\nvar createMicSlice = (set, get) => ({\n  micState: {\n    mediaDevice: void 0,\n    stream: void 0,\n    streamError: null,\n    deviceLoading: true\n  },\n  enableAudioStream: () => __async(void 0, null, function* () {\n    var _a;\n    if (get().micState.stream) {\n      console.error({\n        type: \"error\",\n        msg: \"createMediaSlice.enableStream() | No stream\"\n      });\n      return;\n    }\n    const deviceEnabledConstrains = {\n      audio: {\n        deviceId: (_a = get().micState.mediaDevice) == null ? void 0 : _a.deviceId\n      }\n    };\n    console.info(\"Enabling new Mic stream\");\n    yield navigator.mediaDevices.getUserMedia(deviceEnabledConstrains).then((_stream) => {\n      set(() => ({\n        micState: __spreadProps(__spreadValues({}, get().micState), {\n          stream: _stream,\n          deviceLoading: false\n        })\n      }));\n    }).catch((_error) => {\n      set(() => ({\n        micState: __spreadProps(__spreadValues({}, get().micState), {\n          streamError: {\n            type: _error.name,\n            blocked: _error.name === \"NotAllowedError\"\n          },\n          deviceLoading: false\n        })\n      }));\n    });\n    if (!get().micState.mediaDevice) {\n      const audioDevices = yield get().getAudioDevices();\n      console.info({ audioDevices });\n      get().setAudioDevice(audioDevices[0]);\n    }\n  }),\n  getAudioDevices: () => __async(void 0, null, function* () {\n    const { setAudioStreamError } = get();\n    try {\n      const mediaDevices = yield navigator.mediaDevices.enumerateDevices();\n      const devices = mediaDevices.filter(({ kind }) => kind === \"audioinput\");\n      return devices;\n    } catch (err) {\n      setAudioStreamError(err == null ? void 0 : err.name);\n      return [];\n    }\n  }),\n  setAudioDevice: (device) => {\n    set(() => ({\n      micState: __spreadProps(__spreadValues({}, get().micState), {\n        mediaDevice: device\n      })\n    }));\n  },\n  switchAudioStream: (stream) => {\n    console.info({\n      type: \"info\",\n      msg: \"switchAudioStream() | Switching A stream\"\n    });\n    if (!stream) {\n      console.info({\n        type: \"info\",\n        msg: \"switchAudioStream() | No stream Found using default Stream\"\n      });\n      return;\n    }\n    get().pauseAudioTracks();\n    get().setAudioStream(stream);\n  },\n  setAudioStream: (stream) => {\n    console.info({\n      type: \"info\",\n      msg: \"setAudioStream() | Setting Audio stream\",\n      stream\n    });\n    set(() => ({\n      micState: __spreadProps(__spreadValues({}, get().micState), {\n        stream\n      })\n    }));\n  },\n  pauseAudioTracks: () => {\n    const { stream } = get().micState;\n    if (!stream)\n      return;\n    console.info({\n      type: \"info\",\n      msg: \"pauseAudioTracks() | Pausing Audio stream\"\n    });\n    stream.getTracks().forEach((track) => track.stop());\n    set(() => ({ micState: __spreadProps(__spreadValues({}, get().micState), { stream: void 0 }) }));\n  },\n  setAudioDeviceLoading: (loading) => {\n    set(() => ({ micState: __spreadProps(__spreadValues({}, get().micState), { deviceLoading: loading }) }));\n  },\n  setAudioStreamError: (error) => {\n    set(() => ({\n      micState: __spreadProps(__spreadValues({}, get().micState), {\n        streamError: {\n          type: error || \"UnknownError\",\n          blocked: error === \"NotAllowedError\"\n        }\n      })\n    }));\n  }\n});\nvar createMicSlice_default = createMicSlice;\n\n// src/store/createUserSlice.ts\nvar createUserSlice = (set, get) => ({\n  user: {\n    uid: \"\",\n    socket: \"\",\n    node: \"\",\n    avatarUrl: \"\",\n    messages: []\n  },\n  connection: null,\n  peer: null,\n  conversations: {},\n  groups: {},\n  syncMessages: [],\n  incorrectKeys: false,\n  setUser: (user) => set(() => ({ user })),\n  setPeer: (peer) => set(() => ({ peer })),\n  setConnection: (peer) => set(() => ({ connection: peer }))\n});\nvar createUserSlice_default = createUserSlice;\n\n// src/store/createErrorSlice.ts\nvar createErrorSlice = (set) => ({\n  errorType: null,\n  errorMessage: void 0,\n  setError: (type, msg) => set(() => ({ errorType: type, errorMessage: msg })),\n  resetError: () => set(() => ({ errorType: null, errorMessage: void 0 }))\n});\nvar createErrorSlice_default = createErrorSlice;\n\n// src/store/useRootStore.ts\nvar createRootSlice = (set, get) => __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, createCallerSlice_default(set, get)), createMediaSlice_default(set, get)), createMicSlice_default(set, get)), createUserSlice_default(set, get)), createErrorSlice_default(set, get));\nvar useDivergentStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\n  (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.devtools)(createRootSlice, {\n    name: \"divergent-client\",\n    anonymousActionType: \"action\"\n  })\n);\nvar { getState, setState } = useDivergentStore;\nvar useRootStore_default = useDivergentStore;\n\n// src/DivergentAVClient/index.tsx\n\n\n// src/DivergentAVClient/context.ts\n\nvar DivergentAVClientContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)(\n  {}\n);\n\n// src/DivergentAVClient/DivergentAVClient.ts\n\n\n\n// src/DivergentAVClient/utils/logger.ts\n\nvar logger = pino__WEBPACK_IMPORTED_MODULE_5__({\n  browser: { asObject: false },\n  enabled: true\n});\nvar logger_default = logger;\n\n// src/DivergentAVClient/utils/Verner/verner.ts\n\n\n// src/DivergentAVClient/utils/Verner/verner-utils.ts\n\n\nvar vernerUtils = {\n  convertPublicKey: (publicKey) => {\n    const pk = ed2curve__WEBPACK_IMPORTED_MODULE_7__.convertPublicKey(publicKey);\n    if (pk)\n      return pk;\n    else\n      return new Uint8Array();\n  },\n  convertSecretKey: (secretKey) => {\n    return ed2curve__WEBPACK_IMPORTED_MODULE_7__.convertSecretKey(secretKey);\n  },\n  hexToUint8: (string) => {\n    return Uint8Array.from(Buffer.from(string, \"hex\"));\n  },\n  uint8ToHex: (uint8array) => {\n    return Buffer.from(uint8array).toString(\"hex\");\n  },\n  strToUtf8: (str) => {\n    console.log(str);\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__.decodeUTF8(str);\n  },\n  utf8ToStr: (uint8) => {\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__.encodeUTF8(uint8);\n  },\n  uint8toBase64: (uint8) => {\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__.encodeBase64(uint8);\n  },\n  base64ToUint8: (str) => {\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__.decodeBase64(str);\n  }\n};\nvar verner_utils_default = vernerUtils;\n\n// src/DivergentAVClient/utils/Verner/verner.ts\nvar Verner = {\n  generateKeys: (uid) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const ks = tweetnacl__WEBPACK_IMPORTED_MODULE_6__.sign.keyPair();\n        const publicKey = verner_utils_default.uint8ToHex(ks.publicKey);\n        const secretKey = verner_utils_default.uint8ToHex(ks.secretKey);\n        resolve({ publicKey, secretKey });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  },\n  getSigningKeys: (publicKey, secretKey) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const keypair = tweetnacl__WEBPACK_IMPORTED_MODULE_6__.sign.keyPair();\n        const pk = verner_utils_default.hexToUint8(publicKey);\n        const sk = verner_utils_default.hexToUint8(secretKey);\n        keypair.publicKey = pk;\n        keypair.secretKey = sk;\n        resolve(keypair);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  },\n  encryptMessage: (message, nonce, participantPublicKey, selfSecretKey) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const utf8Message = verner_utils_default.strToUtf8(message);\n        const uint8Nonce = verner_utils_default.hexToUint8(nonce);\n        const uint8ppk = verner_utils_default.hexToUint8(participantPublicKey);\n        const uint8spk = verner_utils_default.hexToUint8(selfSecretKey);\n        const curve25519publicKey = verner_utils_default.convertPublicKey(uint8ppk);\n        const curver25519secretKey = verner_utils_default.convertSecretKey(uint8spk);\n        const encryptedMessage = tweetnacl__WEBPACK_IMPORTED_MODULE_6__.box(\n          utf8Message,\n          uint8Nonce,\n          curve25519publicKey,\n          curver25519secretKey\n        );\n        const encryptedMsgStr = verner_utils_default.uint8toBase64(encryptedMessage);\n        resolve(encryptedMsgStr);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  },\n  decryptMessage: (encryptedMessage, nonce, participantPublicKey, selfSecretKey) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const utf8EncryptedMessage = verner_utils_default.base64ToUint8(encryptedMessage);\n        const uint8Nonce = verner_utils_default.hexToUint8(nonce);\n        const uint8ppk = verner_utils_default.hexToUint8(participantPublicKey);\n        const uint8spk = verner_utils_default.hexToUint8(selfSecretKey);\n        const curve25519publicKey = verner_utils_default.convertPublicKey(uint8ppk);\n        const curver25519secretKey = verner_utils_default.convertSecretKey(uint8spk);\n        const decryptedMessage = tweetnacl__WEBPACK_IMPORTED_MODULE_6__.box.open(\n          utf8EncryptedMessage,\n          uint8Nonce,\n          curve25519publicKey,\n          curver25519secretKey\n        );\n        const decryptedMsgStr = verner_utils_default.utf8ToStr(\n          decryptedMessage\n        );\n        resolve(decryptedMsgStr);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  },\n  generateNonce: () => {\n    return new Promise((resolve, reject) => {\n      try {\n        const nonceHexStr = [...Array(48)].map(() => Math.floor(Math.random() * 16).toString(16)).join(\"\");\n        resolve(nonceHexStr);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n};\nvar verner_default = Verner;\n\n// src/DivergentAVClient/DivergentAVClient.ts\n\n\n\n// src/DivergentAVClient/utils/auth/auth.ts\n\nvar walletAuth = {\n  _generateSignatureMessage: (walletAddress) => __async(void 0, null, function* () {\n    const identityProviderResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(\n      `https://api.identity.testing.huddle01.com/sign-message?address=${walletAddress}`\n    );\n    return identityProviderResponse.data.message;\n  }),\n  verifySignature: (walletAddress, signMessage, signature) => __async(void 0, null, function* () {\n    const apiResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].post(\n      \"https://api.identity.testing.huddle01.com/login\",\n      {\n        address: walletAddress,\n        signature,\n        message: signMessage,\n        walletType: \"ethereum\",\n        platformOrigin: \"web-platform\"\n      }\n    );\n    return apiResponse.data;\n  })\n};\nvar lensAuth = {\n  getSignatureMessage: (address) => __async(void 0, null, function* () {\n    const apiResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].post(\"https://api.lens.dev\", {\n      query: `query Challenge($address: EthereumAddress!) {\n              challenge(request: { address: $address }) {\n              text\n            }\n        }`,\n      variables: {\n        address\n      }\n    });\n    return apiResponse.data.data.challenge.text;\n  }),\n  getTokens: (address, signature) => __async(void 0, null, function* () {\n    const apiResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].post(\n      \"https://api.identity.testing.huddle01.com/login-did\",\n      {\n        didAccessToken: signature,\n        address,\n        walletType: \"lens\",\n        platformOrigin: \"web-platform\"\n      }\n    );\n    return apiResponse.data;\n  }),\n  getHandle: (address) => __async(void 0, null, function* () {\n    const apiResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].post(\"https://api.lens.dev\", {\n      query: `query Profiles($address: EthereumAddress!) {\n       profiles(request: { ownedBy: [$address], limit: 10 }) {\n         items {\n           id\n           name\n           handle\n         }\n       }\n     }`,\n      variables: {\n        address\n      }\n    });\n    return apiResponse.data.data.profiles.items[0].handle;\n  })\n};\n\n// src/DivergentAVClient/utils/KMSUtils.ts\nvar KMSUtils = {\n  generateIdentityKey: () => __async(void 0, null, function* () {\n    let key = yield window.crypto.subtle.generateKey(\n      {\n        name: \"AES-GCM\",\n        length: 256\n      },\n      true,\n      [\"encrypt\", \"decrypt\"]\n    );\n    const rawKeyBuf = yield window.crypto.subtle.exportKey(\"raw\", key);\n    const rawKeyArr = new Uint8Array(rawKeyBuf);\n    return Buffer.from(rawKeyArr).toString(\"hex\");\n  }),\n  aesGcmEncrypt: (secretKey, signature) => __async(void 0, null, function* () {\n    const pwUtf8 = new TextEncoder().encode(signature);\n    const pwHash = yield window.crypto.subtle.digest(\"SHA-256\", pwUtf8);\n    const iv = yield window.crypto.getRandomValues(new Uint8Array(12));\n    const ivStr = Array.from(iv).map((b) => String.fromCharCode(b)).join(\"\");\n    const alg = { name: \"AES-GCM\", iv };\n    const key = yield window.crypto.subtle.importKey(\n      \"raw\",\n      pwHash,\n      alg,\n      false,\n      [\"encrypt\"]\n    );\n    const ptUint8 = new TextEncoder().encode(secretKey);\n    const ctBuffer = yield window.crypto.subtle.encrypt(alg, key, ptUint8);\n    const ctArray = Array.from(new Uint8Array(ctBuffer));\n    const ctStr = ctArray.map((byte) => String.fromCharCode(byte)).join(\"\");\n    return btoa(ivStr + ctStr);\n  }),\n  aesGcmDecrypt: (cipherKey, signature) => __async(void 0, null, function* () {\n    const pwUtf8 = new TextEncoder().encode(signature);\n    const pwHash = yield window.crypto.subtle.digest(\"SHA-256\", pwUtf8);\n    const ivStr = atob(cipherKey).slice(0, 12);\n    const iv = new Uint8Array(Array.from(ivStr).map((ch) => ch.charCodeAt(0)));\n    const alg = { name: \"AES-GCM\", iv };\n    const key = yield window.crypto.subtle.importKey(\n      \"raw\",\n      pwHash,\n      alg,\n      false,\n      [\"decrypt\"]\n    );\n    const ctStr = atob(cipherKey).slice(12);\n    const ctUint8 = new Uint8Array(\n      Array.from(ctStr).map((ch) => ch.charCodeAt(0))\n    );\n    try {\n      const plainBuffer = yield window.crypto.subtle.decrypt(alg, key, ctUint8);\n      return new TextDecoder().decode(plainBuffer);\n    } catch (error) {\n      throw new Error(\"decrypt failed\");\n    }\n  })\n};\nvar KMSUtils_default = KMSUtils;\n\n// src/DivergentAVClient/DivergentAVClient.ts\nvar getDivergentStore;\nvar DivergentStore = class {\n  static init(get) {\n    getDivergentStore = get;\n  }\n  getPeer() {\n    const { peer } = getDivergentStore();\n    if (!peer) {\n      logger_default.error({\n        message: \"peer is not set\",\n        meta: { peer }\n      });\n      return;\n    }\n    return peer;\n  }\n  enableAudioStream() {\n    return __async(this, null, function* () {\n      const { enableAudioStream } = getDivergentStore();\n      yield enableAudioStream();\n    });\n  }\n  disableAudioStream() {\n    return __async(this, null, function* () {\n      const { pauseAudioTracks } = getDivergentStore();\n      yield pauseAudioTracks();\n    });\n  }\n  getUser() {\n    const { user } = getDivergentStore();\n    return user;\n  }\n  getMicStream() {\n    const { micState } = getDivergentStore();\n    if (!micState.stream) {\n      logger_default.error({\n        message: \"mic stream is not set\",\n        meta: { micState }\n      });\n      return;\n    }\n    return micState.stream;\n  }\n  getCallerSignal() {\n    const { callerSignal } = getDivergentStore();\n    return callerSignal;\n  }\n  getCallerUid() {\n    const { callerUid } = getDivergentStore();\n    return callerUid;\n  }\n  setUser(user) {\n    const { setUser } = getDivergentStore();\n    setUser(user);\n  }\n  setCallerUid(uid) {\n    const { setCallerUid } = getDivergentStore();\n    setCallerUid(uid);\n  }\n  setPeer(peer) {\n    const { setPeer } = getDivergentStore();\n    setPeer(peer);\n  }\n  setCallerSignal(signal) {\n    const { setCallerSignal } = getDivergentStore();\n    setCallerSignal(signal);\n  }\n  setCallerStream(stream) {\n    const { setCallerStream } = getDivergentStore();\n    setCallerStream(stream);\n  }\n  setConnection(peer) {\n    const { setConnection } = getDivergentStore();\n    setConnection(peer);\n  }\n  setError(type, msg) {\n    const { setError } = getDivergentStore();\n    setError(type, msg);\n  }\n  resetError() {\n    const { resetError } = getDivergentStore();\n    resetError();\n  }\n};\nvar DivergentSocketClient = class extends DivergentStore {\n  constructor(rpcEndpoint) {\n    super();\n    this.rpcEndpoint = rpcEndpoint;\n    this.socket = void 0;\n  }\n};\nvar DivergentAVClient = class extends DivergentSocketClient {\n  constructor(rpcEndpoint) {\n    super(rpcEndpoint);\n    this.start = () => __async(this, null, function* () {\n      if (!this.socket) {\n        console.error(this.socket);\n        return;\n      }\n      this.socket.on(\"update-peer\", (data) => __async(this, null, function* () {\n        logger_default.info({\n          logType: `update-peer`,\n          message: `Updating peer}`,\n          meta: JSON.stringify(data)\n        });\n        this.setUser(data);\n      }));\n      this.socket.on(\"call\", (data) => {\n        logger_default.info({\n          type: `call-user`,\n          message: `Receiving call`,\n          meta: {\n            from: data.fromUid,\n            to: this.getUser().uid\n          }\n        });\n        this.setCallerUid(data.fromUid);\n        this.setCallerSignal(data.signal);\n      });\n      this.socket.on(\"end-call\", () => {\n        console.log(\"ENDING CALL\");\n        this.setConnection(null);\n        this.setPeer(null);\n        this.setCallerUid(\"\");\n        this.setCallerSignal(null);\n        this.setCallerStream(null);\n        this.disableAudioStream();\n      });\n      this.socket.on(\"error\", (data) => {\n        this.setError(data.type, data.msg);\n      });\n    });\n    this._getUserKey = (uid, type) => {\n      const opts = {\n        publicKey: (uid2) => __async(this, null, function* () {\n          const rpcResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(\n            `${this.rpcEndpoint}/public-key/${uid2}`\n          );\n          return rpcResponse.data.publicKey;\n        }),\n        secretKey: (uid2) => __async(this, null, function* () {\n          try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_10__.ethers.providers.Web3Provider(\n              window.ethereum\n            );\n            yield provider.send(\"eth_requestAccounts\", []);\n            const signer = yield provider.getSigner();\n            const walletAddress = yield signer.getAddress();\n            const rpcResponse1 = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(\n              `${this.rpcEndpoint}/secret-key/${uid2}`\n            );\n            const encryptedSecretKey = rpcResponse1.data.secretKey;\n            const signatureMessageForIdentityKey = `Requesting to access your Identity Key. Nonce: ${yield verner_default.generateNonce()}`;\n            const identitySignature = yield signer.signMessage(\n              signatureMessageForIdentityKey\n            );\n            const rpcResponse2 = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(\n              uid2 == walletAddress ? `${this.rpcEndpoint}/identity-key/${walletAddress}?signature=${identitySignature}&signatureMessage=${signatureMessageForIdentityKey}` : `${this.rpcEndpoint}/identity-key/${walletAddress}?signature=${identitySignature}&signatureMessage=${signatureMessageForIdentityKey}&uid=${uid2}`\n            );\n            const identityKey = rpcResponse2.data.identityKey;\n            const signature = yield signer.signMessage(\n              `Enable identity on Divergent: ${identityKey}`\n            );\n            const secretKey = yield KMSUtils_default.aesGcmDecrypt(\n              encryptedSecretKey,\n              signature\n            );\n            return secretKey;\n          } catch (e) {\n            this.setError(\n              \"signRejected\",\n              \"User has rejected to provide the signature.\"\n            );\n          }\n        })\n      };\n      return opts[type](uid);\n    };\n    this._loginWithWallet = () => __async(this, null, function* () {\n      try {\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_10__.ethers.providers.Web3Provider(\n          window.ethereum\n        );\n        yield provider.send(\"eth_requestAccounts\", []);\n        const signer = yield provider.getSigner();\n        const walletAddress = yield signer.getAddress();\n        const signMessage = yield walletAuth._generateSignatureMessage(\n          walletAddress\n        );\n        const signature = yield signer.signMessage(signMessage);\n        yield this._handleAuth(walletAddress, signMessage, signature);\n        return;\n      } catch (e) {\n        this.setError(\n          \"signRejected\",\n          \"User has rejected to provide the signature.\"\n        );\n      }\n    });\n    this._loginWithLens = () => __async(this, null, function* () {\n      try {\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_10__.ethers.providers.Web3Provider(\n          window.ethereum\n        );\n        yield provider.send(\"eth_requestAccounts\", []);\n        const signer = yield provider.getSigner();\n        const walletAddress = yield signer.getAddress();\n        const signatureMessage = yield lensAuth.getSignatureMessage(\n          walletAddress\n        );\n        const signature = yield signer.signMessage(signatureMessage);\n        const tokens = yield lensAuth.getTokens(walletAddress, signature);\n        const uid = yield lensAuth.getHandle(walletAddress);\n        localStorage.setItem(\n          \"lensAccessToken\",\n          JSON.stringify({\n            accessToken: tokens.lensAccessToken,\n            refreshToken: tokens.lensRefreshToken\n          })\n        );\n        this.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_3__.io)(this.rpcEndpoint, {\n          auth: {\n            token: tokens.accessToken\n          }\n        });\n        this.start();\n        this._handleKMSAuth(uid);\n      } catch (e) {\n        this.setError(\n          \"signRejected\",\n          \"User has rejected to provide the signature.\"\n        );\n      }\n    });\n    this._handleAuth = (uid, signMessage, signature) => __async(this, null, function* () {\n      const tokens = yield walletAuth.verifySignature(\n        uid,\n        signMessage,\n        signature\n      );\n      this.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_3__.io)(this.rpcEndpoint, {\n        auth: {\n          token: tokens.accessToken\n        }\n      });\n      this.start();\n      this._handleKMSAuth(uid);\n    });\n    this._handleKMSAuth = (uid) => __async(this, null, function* () {\n      try {\n        const rpcResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(`${this.rpcEndpoint}/${uid}`);\n        if (!rpcResponse.data.exists) {\n          const identityKey = yield KMSUtils_default.generateIdentityKey();\n          const provider = new ethers__WEBPACK_IMPORTED_MODULE_10__.ethers.providers.Web3Provider(\n            window.ethereum\n          );\n          yield provider.send(\"eth_requestAccounts\", []);\n          const signer = yield provider.getSigner();\n          const signature = yield signer.signMessage(\n            `Enable identity on Divergent: ${identityKey}`\n          );\n          const keys = yield verner_default.generateKeys(uid);\n          const encryptedSecretKey = yield KMSUtils_default.aesGcmEncrypt(\n            keys.secretKey,\n            signature\n          );\n          this.secretKey = keys.secretKey;\n          this.publicKey = keys.publicKey;\n          this.socket && this.socket.emit(\"@update-peer\", {\n            uid,\n            id: this.socket.id,\n            type: \"login\",\n            identityKey,\n            publicKey: keys.publicKey,\n            secretKey: encryptedSecretKey\n          });\n        } else {\n          this.secretKey = yield this._getUserKey(uid, \"secretKey\");\n          this.publicKey = yield this._getUserKey(uid, \"publicKey\");\n          this.socket && this.socket.emit(\"@update-peer\", {\n            uid,\n            id: this.socket.id,\n            type: \"login\"\n          });\n        }\n      } catch (e) {\n        this.setError(\n          \"signRejected\",\n          \"User has rejected to provide the signature.\"\n        );\n      }\n    });\n    this.init = (type) => __async(this, null, function* () {\n      logger_default.info({\n        type: \"login\",\n        message: \"Logging in user\"\n      });\n      if (type == \"wallet\")\n        yield this._loginWithWallet();\n      else if (type == \"lens\")\n        yield this._loginWithLens();\n      else\n        this._loginWithWallet();\n      return;\n    });\n    this.dial = (toId) => __async(this, null, function* () {\n      try {\n        logger_default.info({\n          type: `dial`,\n          message: `Dialing to a user`,\n          meta: {\n            to: toId,\n            from: this.getUser().uid\n          }\n        });\n        this.setCallerUid(toId);\n        yield this.enableAudioStream();\n        const peer = new simple_peer__WEBPACK_IMPORTED_MODULE_4__({\n          initiator: true,\n          trickle: false,\n          stream: this.getMicStream() ? this.getMicStream() : void 0\n        });\n        this.setPeer(peer);\n        peer.on(\"signal\", (data) => {\n          const user = this.getUser();\n          console.log(user);\n          if (!this.socket)\n            return;\n          this.socket.emit(\"@call\", {\n            peerToCall: toId,\n            signalData: data,\n            from: user.uid\n          });\n        });\n        peer.on(\"stream\", (stream) => {\n          console.log(stream);\n          this.setCallerStream(stream);\n        });\n        peer.on(\"data\", (data) => {\n          const decodedData = new TextDecoder().decode(data);\n          console.log(decodedData);\n        });\n        console.log(this.getPeer());\n        if (!this.socket)\n          return;\n        this.socket.on(\"answer\", (signal) => {\n          console.log(\"CALL ACCEPTED\", signal);\n          peer.signal(signal);\n        });\n        this.setConnection(peer);\n      } catch (e) {\n        logger_default.error({\n          type: `dial-error`,\n          message: `Unable to dial to user`,\n          meta: JSON.stringify(e)\n        });\n        return e;\n      }\n    });\n    this.answer = () => __async(this, null, function* () {\n      try {\n        logger_default.info({\n          type: `answer`,\n          messaging: `Answering call`\n        });\n        yield this.enableAudioStream();\n        const peer = new simple_peer__WEBPACK_IMPORTED_MODULE_4__({\n          initiator: false,\n          trickle: false,\n          stream: this.getMicStream() ? this.getMicStream() : void 0\n        });\n        this.setPeer(peer);\n        peer.on(\"signal\", (data) => {\n          var _a;\n          (_a = this.socket) == null ? void 0 : _a.emit(\"@answer\", {\n            signal: data,\n            to: this.getCallerUid()\n          });\n        });\n        peer.on(\"stream\", (stream) => {\n          console.log(stream);\n          this.setCallerStream(stream);\n        });\n        peer.signal(this.getCallerSignal());\n        this.setConnection(peer);\n      } catch (e) {\n        logger_default.error({\n          type: `answer-error`,\n          messaging: `Failed to answer call`,\n          meta: JSON.stringify(e)\n        });\n        return e;\n      }\n    });\n    this.end = () => {\n      var _a;\n      (_a = this.socket) == null ? void 0 : _a.emit(\"@end\", { peerToEnd: this.getCallerUid() });\n      this.setConnection(null);\n      this.setPeer(null);\n      this.setCallerUid(\"\");\n      this.setCallerSignal(null);\n      this.setCallerStream(null);\n      this.disableAudioStream();\n    };\n    this.revealKeys = () => __async(this, null, function* () {\n      const uid = this.getUser().uid;\n      const publicKey = yield this._getUserKey(uid, \"publicKey\");\n      const secretKey = yield this._getUserKey(uid, \"secretKey\");\n      const keys = { publicKey, secretKey };\n      return keys;\n    });\n  }\n};\nvar DivergentAVClient_default = DivergentAVClient;\n\n// src/DivergentAVClient/index.tsx\nvar DivergentAVClientProvider = ({ children, value }) => {\n  const { getState: getState2 } = useRootStore_default;\n  DivergentAVClient_default.init(getState2);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_2__.createElement(DivergentAVClientContext.Provider, { value }, \" \", children, \" \");\n};\nvar DivergentAVClient_default2 = DivergentAVClientProvider;\n\n// src/hooks/index.ts\n\nvar useDivergentAVClient = () => (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(DivergentAVClientContext);\n\n// src/DivergentAVClient/hc.ts\nvar dc;\nvar createDivergentAVClient = (rpcEndpoint) => {\n  dc = new DivergentAVClient_default(rpcEndpoint);\n  return dc;\n};\nvar getDivergentAVClient = (rpcEndpoint) => {\n  if (!dc && rpcEndpoint)\n    createDivergentAVClient(rpcEndpoint);\n  return dc;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@huddle01/divergent-av/dist/index.mjs\n"));

/***/ })

});