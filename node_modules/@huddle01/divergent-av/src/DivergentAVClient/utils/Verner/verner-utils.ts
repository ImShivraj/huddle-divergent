import ed2curve from "ed2curve";
import util from "tweetnacl-util";

type TVernerUtils = {
  convertPublicKey: (publicKey: Uint8Array) => Uint8Array;
  convertSecretKey: (secretKey: Uint8Array) => Uint8Array;
  hexToUint8: (string: string) => Uint8Array;
  uint8ToHex: (uint8array: Uint8Array) => string;
  strToUtf8: (str: string) => Uint8Array;
  utf8ToStr: (uint8: Uint8Array) => string;
  uint8toBase64: (uint8: Uint8Array) => string;
  base64ToUint8: (str: string) => Uint8Array;
};

const vernerUtils: TVernerUtils = {
  convertPublicKey: (publicKey: Uint8Array): Uint8Array => {
    const pk = ed2curve.convertPublicKey(publicKey);
    if (pk) return pk;
    else return new Uint8Array();
  },

  convertSecretKey: (secretKey: Uint8Array): Uint8Array => {
    return ed2curve.convertSecretKey(secretKey);
  },

  hexToUint8: (string: string): Uint8Array => {
    return Uint8Array.from(Buffer.from(string, "hex"));
  },

  uint8ToHex: (uint8array: Uint8Array): string => {
    return Buffer.from(uint8array).toString("hex");
  },

  strToUtf8: (str: string): Uint8Array => {
    console.log(str);
    return util.decodeUTF8(str);
  },

  utf8ToStr: (uint8: Uint8Array): string => {
    return util.encodeUTF8(uint8);
  },

  uint8toBase64: (uint8: Uint8Array): string => {
    return util.encodeBase64(uint8);
  },

  base64ToUint8: (str: string): Uint8Array => {
    return util.decodeBase64(str);
  },
};

export default vernerUtils;
