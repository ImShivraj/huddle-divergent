"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./node_modules/@huddle01/divergent-client/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@huddle01/divergent-client/dist/index.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DivergentClientProvider\": function() { return /* binding */ DivergentClient_default2; },\n/* harmony export */   \"createDivergentClient\": function() { return /* binding */ createDivergentClient; },\n/* harmony export */   \"getDivergentClient\": function() { return /* binding */ getDivergentClient; },\n/* harmony export */   \"useDivergentClient\": function() { return /* binding */ useDivergentClient; },\n/* harmony export */   \"useDivergentStore\": function() { return /* binding */ useRootStore_default; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"./node_modules/zustand/esm/index.js\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"./node_modules/zustand/esm/middleware.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! socket.io-client */ \"./node_modules/socket.io-client/build/esm/index.js\");\n/* harmony import */ var simple_peer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! simple-peer */ \"./node_modules/simple-peer/index.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! pino */ \"./node_modules/pino/browser.js\");\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tweetnacl */ \"./node_modules/tweetnacl/nacl-fast.js\");\n/* harmony import */ var ed2curve__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ed2curve */ \"./node_modules/ed2curve/ed2curve.js\");\n/* harmony import */ var tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tweetnacl-util */ \"./node_modules/tweetnacl-util/nacl-util.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __forAwait = (obj, it, method) => {\n  it = obj[Symbol.asyncIterator];\n  method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((resolve, reject, done) => {\n    arg = fn.call(obj, arg);\n    done = arg.done;\n    return Promise.resolve(arg.value).then((value) => resolve({ value, done }), reject);\n  }));\n  return it ? it.call(obj) : (obj = obj[Symbol.iterator](), it = {}, method(\"next\"), method(\"return\"), it);\n};\n\n// src/store/useRootStore.ts\n\n\n\n// src/store/createCallerSlice.ts\nvar createCallerSlice = (set) => ({\n  callerUid: void 0,\n  callerSignal: \"\",\n  callerStream: null,\n  connection: null,\n  setCallerUid: (callerUid) => set(() => ({ callerUid })),\n  setCallerSignal: (callerSignal) => set(() => ({ callerSignal })),\n  setCallerStream: (callerStream) => set(() => ({ callerStream })),\n  setConnection: (peer) => set(() => ({ connection: peer }))\n});\nvar createCallerSlice_default = createCallerSlice;\n\n// src/store/createMediaSlice.ts\nvar createMediaSlice = (set, get) => ({\n  mediaDevice: void 0,\n  stream: void 0,\n  streamError: void 0,\n  deviceLoading: true,\n  streamsArry: [],\n  enableStream: () => __async(void 0, null, function* () {\n    var _a;\n    if (get().stream) {\n      console.error({\n        type: \"error\",\n        msg: \"createMediaSlice.enableStream() | No stream\"\n      });\n      return;\n    }\n    const deviceEnabledConstrains = {\n      video: {\n        width: { ideal: 1280 },\n        height: { ideal: 720 },\n        deviceId: (_a = get().mediaDevice) == null ? void 0 : _a.deviceId\n      }\n    };\n    yield navigator.mediaDevices.getUserMedia(deviceEnabledConstrains).then((_stream) => {\n      const _newStreamArray = [...get().streamsArry, _stream];\n      set(() => ({\n        stream: _stream,\n        deviceLoading: false,\n        streamsArry: _newStreamArray\n      }));\n    }).catch((_error) => {\n      set(() => ({\n        streamError: {\n          type: _error.name,\n          blocked: true\n        },\n        deviceLoading: false\n      }));\n    });\n    if (!get().mediaDevice) {\n      const mediaDevices = yield get().getMediaDevices();\n      console.info({ mediaDevices });\n      get().setMediaDevice(mediaDevices[0]);\n    }\n  }),\n  getMediaDevices: () => __async(void 0, null, function* () {\n    const { setStreamError } = get();\n    try {\n      const mediaDevices = yield navigator.mediaDevices.enumerateDevices();\n      const devices = mediaDevices.filter(({ kind }) => kind === \"videoinput\");\n      return devices;\n    } catch (err) {\n      setStreamError(err == null ? void 0 : err.name);\n      return [];\n    }\n  }),\n  setMediaDevice: (device) => {\n    set(() => ({\n      mediaDevice: device\n    }));\n    console.info(\"set\");\n  },\n  switchMediaStream: (stream) => {\n    console.info({\n      type: \"info\",\n      msg: \"switchMediaStream() | Switching media stream\"\n    });\n    if (!stream) {\n      console.info({\n        type: \"info\",\n        msg: \"switchMediaStream() | No stream Found using default Stream\"\n      });\n      return;\n    }\n    get().pauseTracks();\n    get().setMediaStream(stream);\n  },\n  setMediaStream: (stream) => {\n    console.info({\n      type: \"info\",\n      msg: \"setMediaStream() | Setting media stream\",\n      stream\n    });\n    set(() => ({ stream }));\n  },\n  pauseTracks: () => {\n    const { stream } = get();\n    if (!stream)\n      return;\n    get().streamsArry.forEach((stream2) => {\n      stream2.getTracks().forEach((track) => {\n        track.stop();\n      });\n    });\n    stream.getTracks().forEach((track) => track.stop());\n    set(() => ({ stream: void 0, streamsArry: [] }));\n  },\n  setDeviceLoading: (loading) => {\n    set(() => ({ deviceLoading: loading }));\n  },\n  setStreamError: (error) => {\n    set(() => ({\n      streamError: {\n        type: error || \"UnknownError\",\n        blocked: error === \"NotAllowedError\"\n      }\n    }));\n  }\n});\nvar createMediaSlice_default = createMediaSlice;\n\n// src/store/createMicSlice.ts\nvar createMicSlice = (set, get) => ({\n  micState: {\n    mediaDevice: void 0,\n    stream: void 0,\n    streamError: null,\n    deviceLoading: true\n  },\n  enableAudioStream: () => __async(void 0, null, function* () {\n    var _a;\n    if (get().micState.stream) {\n      console.error({\n        type: \"error\",\n        msg: \"createMediaSlice.enableStream() | No stream\"\n      });\n      return;\n    }\n    const deviceEnabledConstrains = {\n      audio: {\n        deviceId: (_a = get().micState.mediaDevice) == null ? void 0 : _a.deviceId\n      }\n    };\n    console.info(\"Enabling new Mic stream\");\n    yield navigator.mediaDevices.getUserMedia(deviceEnabledConstrains).then((_stream) => {\n      set(() => ({\n        micState: __spreadProps(__spreadValues({}, get().micState), {\n          stream: _stream,\n          deviceLoading: false\n        })\n      }));\n    }).catch((_error) => {\n      set(() => ({\n        micState: __spreadProps(__spreadValues({}, get().micState), {\n          streamError: {\n            type: _error.name,\n            blocked: _error.name === \"NotAllowedError\"\n          },\n          deviceLoading: false\n        })\n      }));\n    });\n    if (!get().micState.mediaDevice) {\n      const audioDevices = yield get().getAudioDevices();\n      console.info({ audioDevices });\n      get().setAudioDevice(audioDevices[0]);\n    }\n  }),\n  getAudioDevices: () => __async(void 0, null, function* () {\n    const { setAudioStreamError } = get();\n    try {\n      const mediaDevices = yield navigator.mediaDevices.enumerateDevices();\n      const devices = mediaDevices.filter(({ kind }) => kind === \"audioinput\");\n      return devices;\n    } catch (err) {\n      setAudioStreamError(err == null ? void 0 : err.name);\n      return [];\n    }\n  }),\n  setAudioDevice: (device) => {\n    set(() => ({\n      micState: __spreadProps(__spreadValues({}, get().micState), {\n        mediaDevice: device\n      })\n    }));\n  },\n  switchAudioStream: (stream) => {\n    console.info({\n      type: \"info\",\n      msg: \"switchAudioStream() | Switching A stream\"\n    });\n    if (!stream) {\n      console.info({\n        type: \"info\",\n        msg: \"switchAudioStream() | No stream Found using default Stream\"\n      });\n      return;\n    }\n    get().pauseAudioTracks();\n    get().setAudioStream(stream);\n  },\n  setAudioStream: (stream) => {\n    console.info({\n      type: \"info\",\n      msg: \"setAudioStream() | Setting Audio stream\",\n      stream\n    });\n    set(() => ({\n      micState: __spreadProps(__spreadValues({}, get().micState), {\n        stream\n      })\n    }));\n  },\n  pauseAudioTracks: () => {\n    const { stream } = get().micState;\n    if (!stream)\n      return;\n    console.info({\n      type: \"info\",\n      msg: \"pauseAudioTracks() | Pausing Audio stream\"\n    });\n    stream.getTracks().forEach((track) => track.stop());\n    set(() => ({ micState: __spreadProps(__spreadValues({}, get().micState), { stream: void 0 }) }));\n  },\n  setAudioDeviceLoading: (loading) => {\n    set(() => ({ micState: __spreadProps(__spreadValues({}, get().micState), { deviceLoading: loading }) }));\n  },\n  setAudioStreamError: (error) => {\n    set(() => ({\n      micState: __spreadProps(__spreadValues({}, get().micState), {\n        streamError: {\n          type: error || \"UnknownError\",\n          blocked: error === \"NotAllowedError\"\n        }\n      })\n    }));\n  }\n});\nvar createMicSlice_default = createMicSlice;\n\n// src/store/createUserSlice.ts\nvar createUserSlice = (set, get) => ({\n  user: {\n    uid: \"\",\n    socket: \"\",\n    node: \"\",\n    avatarUrl: \"\",\n    messages: []\n  },\n  connection: null,\n  peer: null,\n  conversations: {},\n  groups: {},\n  syncMessages: [],\n  incorrectKeys: false,\n  setUser: (user) => set(() => ({ user })),\n  setPeer: (peer) => set(() => ({ peer })),\n  setConnection: (peer) => set(() => ({ connection: peer })),\n  setConversation: (channel, messages) => {\n    const prevConvo = get().conversations;\n    prevConvo[channel] = messages;\n    set(() => ({ conversations: prevConvo }));\n  },\n  setGroups: (id, group) => {\n    const prevGroups = get().groups;\n    prevGroups[id] = group;\n    set(() => ({ groups: prevGroups }));\n  },\n  removeGroup: (id) => {\n    const prevGroups = get().groups;\n    delete prevGroups[id];\n    set(() => ({ groups: prevGroups }));\n  },\n  setIncorrectKeys: (value) => set(() => ({ incorrectKeys: value })),\n  addMessage: (channel, message, type) => {\n    if (type == \"conversation\") {\n      const prevConversation = get().conversations;\n      const messages = prevConversation[channel];\n      messages.push(message);\n      prevConversation[channel] = messages;\n      set(() => ({ conversations: prevConversation }));\n    } else {\n      const prevConversation = get().groups;\n      const groupMessages = prevConversation[channel];\n      groupMessages.messages.push(message);\n      prevConversation[channel] = groupMessages;\n      set(() => ({ groups: prevConversation }));\n    }\n  },\n  addSyncMessage: (message) => {\n    const syncMessages = get().syncMessages;\n    syncMessages.push(message);\n    set(() => ({ syncMessages }));\n  }\n});\nvar createUserSlice_default = createUserSlice;\n\n// src/store/createErrorSlice.ts\nvar createErrorSlice = (set) => ({\n  errorType: null,\n  errorMessage: void 0,\n  setError: (type, msg) => {\n    set(() => ({ errorType: type, errorMessage: msg }));\n    setTimeout(() => {\n      set(() => ({ errorType: null, errorMessage: void 0 }));\n    }, 5e3);\n  }\n});\nvar createErrorSlice_default = createErrorSlice;\n\n// src/store/useRootStore.ts\nvar createRootSlice = (set, get) => __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, createCallerSlice_default(set, get)), createMediaSlice_default(set, get)), createMicSlice_default(set, get)), createUserSlice_default(set, get)), createErrorSlice_default(set, get));\nvar useDivergentStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\n  (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.devtools)(createRootSlice, {\n    name: \"huddle01-client\",\n    anonymousActionType: \"action\"\n  })\n);\nvar { getState, setState } = useDivergentStore;\nvar useRootStore_default = useDivergentStore;\n\n// src/DivergentClient/index.tsx\n\n\n// src/DivergentClient/context.ts\n\nvar DivergentClientContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)({});\n\n// src/DivergentClient/DivergentClient.ts\n\n\n\n// src/DivergentClient/utils/logger.ts\n\nvar logger = pino__WEBPACK_IMPORTED_MODULE_5__({\n  browser: { asObject: false },\n  enabled: true\n});\nvar logger_default = logger;\n\n// src/DivergentClient/utils/Verner/verner.ts\n\n\n// src/DivergentClient/utils/Verner/verner-utils.ts\n\n\nvar vernerUtils = {\n  convertPublicKey: (publicKey) => {\n    const pk = ed2curve__WEBPACK_IMPORTED_MODULE_7__.convertPublicKey(publicKey);\n    if (pk)\n      return pk;\n    else\n      return new Uint8Array();\n  },\n  convertSecretKey: (secretKey) => {\n    return ed2curve__WEBPACK_IMPORTED_MODULE_7__.convertSecretKey(secretKey);\n  },\n  hexToUint8: (string) => {\n    return Uint8Array.from(Buffer.from(string, \"hex\"));\n  },\n  uint8ToHex: (uint8array) => {\n    return Buffer.from(uint8array).toString(\"hex\");\n  },\n  strToUtf8: (str) => {\n    console.log(str);\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__.decodeUTF8(str);\n  },\n  utf8ToStr: (uint8) => {\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__.encodeUTF8(uint8);\n  },\n  uint8toBase64: (uint8) => {\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__.encodeBase64(uint8);\n  },\n  base64ToUint8: (str) => {\n    return tweetnacl_util__WEBPACK_IMPORTED_MODULE_8__.decodeBase64(str);\n  }\n};\nvar verner_utils_default = vernerUtils;\n\n// src/DivergentClient/utils/Verner/verner.ts\nvar Verner = {\n  generateKeys: (uid) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const ks = tweetnacl__WEBPACK_IMPORTED_MODULE_6__.sign.keyPair();\n        const publicKey = verner_utils_default.uint8ToHex(ks.publicKey);\n        const secretKey = verner_utils_default.uint8ToHex(ks.secretKey);\n        resolve({ publicKey, secretKey });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  },\n  getSigningKeys: (publicKey, secretKey) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const keypair = tweetnacl__WEBPACK_IMPORTED_MODULE_6__.sign.keyPair();\n        const pk = verner_utils_default.hexToUint8(publicKey);\n        const sk = verner_utils_default.hexToUint8(secretKey);\n        keypair.publicKey = pk;\n        keypair.secretKey = sk;\n        resolve(keypair);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  },\n  encryptMessage: (message, nonce, participantPublicKey, selfSecretKey) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const utf8Message = verner_utils_default.strToUtf8(message);\n        const uint8Nonce = verner_utils_default.hexToUint8(nonce);\n        const uint8ppk = verner_utils_default.hexToUint8(participantPublicKey);\n        const uint8spk = verner_utils_default.hexToUint8(selfSecretKey);\n        const curve25519publicKey = verner_utils_default.convertPublicKey(uint8ppk);\n        const curver25519secretKey = verner_utils_default.convertSecretKey(uint8spk);\n        const encryptedMessage = tweetnacl__WEBPACK_IMPORTED_MODULE_6__.box(\n          utf8Message,\n          uint8Nonce,\n          curve25519publicKey,\n          curver25519secretKey\n        );\n        const encryptedMsgStr = verner_utils_default.uint8toBase64(encryptedMessage);\n        resolve(encryptedMsgStr);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  },\n  decryptMessage: (encryptedMessage, nonce, participantPublicKey, selfSecretKey) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const utf8EncryptedMessage = verner_utils_default.base64ToUint8(encryptedMessage);\n        const uint8Nonce = verner_utils_default.hexToUint8(nonce);\n        const uint8ppk = verner_utils_default.hexToUint8(participantPublicKey);\n        const uint8spk = verner_utils_default.hexToUint8(selfSecretKey);\n        const curve25519publicKey = verner_utils_default.convertPublicKey(uint8ppk);\n        const curver25519secretKey = verner_utils_default.convertSecretKey(uint8spk);\n        const decryptedMessage = tweetnacl__WEBPACK_IMPORTED_MODULE_6__.box.open(\n          utf8EncryptedMessage,\n          uint8Nonce,\n          curve25519publicKey,\n          curver25519secretKey\n        );\n        const decryptedMsgStr = verner_utils_default.utf8ToStr(\n          decryptedMessage\n        );\n        resolve(decryptedMsgStr);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  },\n  generateNonce: () => {\n    return new Promise((resolve, reject) => {\n      try {\n        const nonceHexStr = [...Array(48)].map(() => Math.floor(Math.random() * 16).toString(16)).join(\"\");\n        resolve(nonceHexStr);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n};\nvar verner_default = Verner;\n\n// src/DivergentClient/DivergentClient.ts\n\n\n\n// src/DivergentClient/utils/auth/auth.ts\n\nvar walletAuth = {\n  _generateSignatureMessage: (walletAddress) => __async(void 0, null, function* () {\n    const identityProviderResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(\n      `https://api.identity.testing.huddle01.com/sign-message?address=${walletAddress}`\n    );\n    return identityProviderResponse.data.message;\n  }),\n  verifySignature: (walletAddress, signMessage, signature) => __async(void 0, null, function* () {\n    const apiResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].post(\n      \"https://api.identity.testing.huddle01.com/login\",\n      {\n        address: walletAddress,\n        signature,\n        message: signMessage,\n        walletType: \"ethereum\",\n        platformOrigin: \"web-platform\"\n      }\n    );\n    return apiResponse.data;\n  })\n};\nvar lensAuth = {\n  getSignatureMessage: (address) => __async(void 0, null, function* () {\n    const apiResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].post(\"https://api.lens.dev\", {\n      query: `query Challenge($address: EthereumAddress!) {\n              challenge(request: { address: $address }) {\n              text\n            }\n        }`,\n      variables: {\n        address\n      }\n    });\n    return apiResponse.data.data.challenge.text;\n  }),\n  getTokens: (address, signature) => __async(void 0, null, function* () {\n    const apiResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].post(\n      \"https://api.identity.testing.huddle01.com/login-did\",\n      {\n        didAccessToken: signature,\n        address,\n        walletType: \"lens\",\n        platformOrigin: \"web-platform\"\n      }\n    );\n    return apiResponse.data;\n  }),\n  getHandle: (address) => __async(void 0, null, function* () {\n    const apiResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].post(\"https://api.lens.dev\", {\n      query: `query Profiles($address: EthereumAddress!) {\n       profiles(request: { ownedBy: [$address], limit: 10 }) {\n         items {\n           id\n           name\n           handle\n         }\n       }\n     }`,\n      variables: {\n        address\n      }\n    });\n    return apiResponse.data.data.profiles.items[0].handle;\n  })\n};\n\n// src/DivergentClient/utils/KMSUtils.ts\nvar KMSUtils = {\n  generateIdentityKey: () => __async(void 0, null, function* () {\n    let key = yield window.crypto.subtle.generateKey(\n      {\n        name: \"AES-GCM\",\n        length: 256\n      },\n      true,\n      [\"encrypt\", \"decrypt\"]\n    );\n    const rawKeyBuf = yield window.crypto.subtle.exportKey(\"raw\", key);\n    const rawKeyArr = new Uint8Array(rawKeyBuf);\n    return Buffer.from(rawKeyArr).toString(\"hex\");\n  }),\n  aesGcmEncrypt: (secretKey, signature) => __async(void 0, null, function* () {\n    const pwUtf8 = new TextEncoder().encode(signature);\n    const pwHash = yield window.crypto.subtle.digest(\"SHA-256\", pwUtf8);\n    const iv = yield window.crypto.getRandomValues(new Uint8Array(12));\n    const ivStr = Array.from(iv).map((b) => String.fromCharCode(b)).join(\"\");\n    const alg = { name: \"AES-GCM\", iv };\n    const key = yield window.crypto.subtle.importKey(\n      \"raw\",\n      pwHash,\n      alg,\n      false,\n      [\"encrypt\"]\n    );\n    const ptUint8 = new TextEncoder().encode(secretKey);\n    const ctBuffer = yield window.crypto.subtle.encrypt(alg, key, ptUint8);\n    const ctArray = Array.from(new Uint8Array(ctBuffer));\n    const ctStr = ctArray.map((byte) => String.fromCharCode(byte)).join(\"\");\n    return btoa(ivStr + ctStr);\n  }),\n  aesGcmDecrypt: (cipherKey, signature) => __async(void 0, null, function* () {\n    const pwUtf8 = new TextEncoder().encode(signature);\n    const pwHash = yield window.crypto.subtle.digest(\"SHA-256\", pwUtf8);\n    const ivStr = atob(cipherKey).slice(0, 12);\n    const iv = new Uint8Array(Array.from(ivStr).map((ch) => ch.charCodeAt(0)));\n    const alg = { name: \"AES-GCM\", iv };\n    const key = yield window.crypto.subtle.importKey(\n      \"raw\",\n      pwHash,\n      alg,\n      false,\n      [\"decrypt\"]\n    );\n    const ctStr = atob(cipherKey).slice(12);\n    const ctUint8 = new Uint8Array(\n      Array.from(ctStr).map((ch) => ch.charCodeAt(0))\n    );\n    try {\n      const plainBuffer = yield window.crypto.subtle.decrypt(alg, key, ctUint8);\n      return new TextDecoder().decode(plainBuffer);\n    } catch (error) {\n      throw new Error(\"decrypt failed\");\n    }\n  })\n};\nvar KMSUtils_default = KMSUtils;\n\n// src/DivergentClient/DivergentClient.ts\nvar getDivergentStore;\nvar DivergentStore = class {\n  static init(get) {\n    getDivergentStore = get;\n  }\n  getPeer() {\n    const { peer } = getDivergentStore();\n    if (!peer) {\n      logger_default.error({\n        message: \"peer is not set\",\n        meta: { peer }\n      });\n      return;\n    }\n    return peer;\n  }\n  enableAudioStream() {\n    return __async(this, null, function* () {\n      const { enableAudioStream } = getDivergentStore();\n      yield enableAudioStream();\n    });\n  }\n  disableAudioStream() {\n    return __async(this, null, function* () {\n      const { pauseAudioTracks } = getDivergentStore();\n      yield pauseAudioTracks();\n    });\n  }\n  getUser() {\n    const { user } = getDivergentStore();\n    return user;\n  }\n  getMicStream() {\n    const { micState } = getDivergentStore();\n    if (!micState.stream) {\n      logger_default.error({\n        message: \"mic stream is not set\",\n        meta: { micState }\n      });\n      return;\n    }\n    return micState.stream;\n  }\n  getCallerSignal() {\n    const { callerSignal } = getDivergentStore();\n    return callerSignal;\n  }\n  getCallerUid() {\n    const { callerUid } = getDivergentStore();\n    return callerUid;\n  }\n  getConversations() {\n    const { conversations } = getDivergentStore();\n    return conversations;\n  }\n  getSyncMessages() {\n    const { syncMessages } = getDivergentStore();\n    return syncMessages;\n  }\n  setUser(user) {\n    const { setUser } = getDivergentStore();\n    setUser(user);\n  }\n  setCallerUid(uid) {\n    const { setCallerUid } = getDivergentStore();\n    setCallerUid(uid);\n  }\n  setPeer(peer) {\n    const { setPeer } = getDivergentStore();\n    setPeer(peer);\n  }\n  setCallerSignal(signal) {\n    const { setCallerSignal } = getDivergentStore();\n    setCallerSignal(signal);\n  }\n  setCallerStream(stream) {\n    const { setCallerStream } = getDivergentStore();\n    setCallerStream(stream);\n  }\n  setConnection(peer) {\n    const { setConnection } = getDivergentStore();\n    setConnection(peer);\n  }\n  setConversation(channel, conversation) {\n    const { setConversation } = getDivergentStore();\n    setConversation(channel, conversation);\n  }\n  setGroups(channel, group) {\n    const { setGroups } = getDivergentStore();\n    setGroups(channel, group);\n  }\n  removeGroup(id) {\n    const { removeGroup } = getDivergentStore();\n    removeGroup(id);\n  }\n  setError(type, msg) {\n    const { setError } = getDivergentStore();\n    setError(type, msg);\n  }\n  setIncorrectKeys(value) {\n    const { setIncorrectKeys } = getDivergentStore();\n    setIncorrectKeys(value);\n  }\n  addMessage(channel, message, type) {\n    const { addMessage } = getDivergentStore();\n    addMessage(channel, message, type);\n  }\n  addSyncMessage(message) {\n    const { addSyncMessage } = getDivergentStore();\n    addSyncMessage(message);\n  }\n};\nvar DivergentSocketClient = class extends DivergentStore {\n  constructor(rpcEndpoint) {\n    super();\n    this.rpcEndpoint = rpcEndpoint;\n    this.socket = void 0;\n  }\n};\nvar DivergentClient = class extends DivergentSocketClient {\n  constructor(rpcEndpoint) {\n    super(rpcEndpoint);\n    this._getAndListenConversations = (uid) => {\n      if (!this.socket)\n        return;\n      this.socket.emit(\"@get-conversations\", { uid });\n    };\n    this.start = () => __async(this, null, function* () {\n      if (!this.socket) {\n        console.error(this.socket);\n        return;\n      }\n      this.socket.on(\"update-peer\", (data) => __async(this, null, function* () {\n        logger_default.info({\n          logType: `update-peer`,\n          message: `Updating peer}`,\n          meta: JSON.stringify(data)\n        });\n        this.setUser(data);\n        this._getAndListenConversations(data.uid);\n      }));\n      this.socket.on(\"get-conversations\", (conversation) => __async(this, null, function* () {\n        console.log(\"GETTING CONVO\", conversation);\n        logger_default.info({\n          logType: `get-conversation`,\n          message: \"Receiving new conversation\",\n          meta: JSON.stringify(conversation)\n        });\n        console.log(conversation.type);\n        switch (conversation.type) {\n          case \"conversation\":\n            try {\n              for (var iter = __forAwait(conversation.messages), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {\n                const message = temp.value;\n                if (this.secretKey && message.verner) {\n                  if (message.from == this.getUser().uid) {\n                    const decryptedMessage = yield verner_default.decryptMessage(\n                      message.message,\n                      message.verner.nonce,\n                      message.verner.keys[message.to],\n                      this.secretKey\n                    );\n                    message.message = decryptedMessage;\n                    console.log(`Decrypt Message SSK ${decryptedMessage}`);\n                  } else {\n                    const decryptedMessage = yield verner_default.decryptMessage(\n                      message.message,\n                      message.verner.nonce,\n                      message.verner.keys[message.from],\n                      this.secretKey\n                    );\n                    message.message = decryptedMessage;\n                  }\n                }\n              }\n            } catch (temp) {\n              error = [temp];\n            } finally {\n              try {\n                more && (temp = iter.return) && (yield temp.call(iter));\n              } finally {\n                if (error)\n                  throw error[0];\n              }\n            }\n            console.log({ ch: conversation.channel, msg: conversation.messages });\n            this.setConversation(conversation.channel, conversation.messages);\n            break;\n          case \"group\":\n            console.log(\"GROUPPPPP\", {\n              ch: conversation.channel,\n              msg: conversation.messages\n            });\n            const group = {};\n            conversation.messages.forEach((c) => {\n              group[c._id] = c.value;\n            });\n            this.setGroups(conversation.channel, group);\n            break;\n          case \"remove\": {\n            console.log(\"REMOVE FROM GROUP\", conversation, {\n              ch: conversation.channel\n            });\n            this.removeGroup(conversation.channel);\n          }\n          default:\n            console.log(\"DEFAULTTTTTTTTT NOOOOOOOOOO\");\n        }\n      }));\n      this.socket.on(\"new-message-async\", (data) => __async(this, null, function* () {\n        logger_default.info({\n          type: `new-message`,\n          message: \"Received new message\",\n          meta: JSON.stringify(data.channel)\n        });\n        console.log(\"Received new message\", data);\n        const opts = {\n          conversation: (data2) => __async(this, null, function* () {\n            if (this.secretKey && data2.message.verner) {\n              if (data2.message.from == this.getUser().uid) {\n                const decryptedMessage2 = yield verner_default.decryptMessage(\n                  data2.message.message,\n                  data2.message.verner.nonce,\n                  data2.message.verner.keys[data2.message.to],\n                  this.secretKey\n                );\n                data2.message.message = decryptedMessage2;\n                this.addMessage(data2.channel, data2.message, \"conversation\");\n                return;\n              }\n              const decryptedMessage = yield verner_default.decryptMessage(\n                data2.message.message,\n                data2.message.verner.nonce,\n                data2.message.verner.keys[data2.message.from],\n                this.secretKey\n              );\n              data2.message.message = decryptedMessage;\n              this.addMessage(data2.channel, data2.message, \"conversation\");\n              return;\n            }\n          }),\n          group: (data2) => __async(this, null, function* () {\n            console.log(data2);\n            this.addMessage(data2.channel, data2.message, \"group\");\n            return;\n          })\n        };\n        opts[data.type](data);\n      }));\n      this.socket.on(\"call\", (data) => {\n        logger_default.info({\n          type: `call-user`,\n          message: `Receiving call`,\n          meta: {\n            from: data.fromUid,\n            to: this.getUser().uid\n          }\n        });\n        this.setCallerUid(data.fromUid);\n        this.setCallerSignal(data.signal);\n      });\n      this.socket.on(\"end-call\", () => {\n        console.log(\"ENDING CALL\");\n        this.setConnection(null);\n        this.setPeer(null);\n        this.setCallerUid(\"\");\n        this.setCallerSignal(null);\n        this.setCallerStream(null);\n        this.disableAudioStream();\n      });\n      this.socket.on(\"error\", (data) => {\n        this.setError(data.type, data.msg);\n      });\n    });\n    this._getUserKey = (uid, type) => {\n      const opts = {\n        publicKey: (uid2) => __async(this, null, function* () {\n          const rpcResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(\n            `${this.rpcEndpoint}/public-key/${uid2}`\n          );\n          return rpcResponse.data.publicKey;\n        }),\n        secretKey: (uid2) => __async(this, null, function* () {\n          try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_10__.ethers.providers.Web3Provider(\n              window.ethereum\n            );\n            yield provider.send(\"eth_requestAccounts\", []);\n            const signer = yield provider.getSigner();\n            const walletAddress = yield signer.getAddress();\n            const rpcResponse1 = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(\n              `${this.rpcEndpoint}/secret-key/${uid2}`\n            );\n            const encryptedSecretKey = rpcResponse1.data.secretKey;\n            const signatureMessageForIdentityKey = `Requesting to access your Identity Key. Nonce: ${yield verner_default.generateNonce()}`;\n            const identitySignature = yield signer.signMessage(\n              signatureMessageForIdentityKey\n            );\n            const rpcResponse2 = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(\n              uid2 == walletAddress ? `${this.rpcEndpoint}/identity-key/${walletAddress}?signature=${identitySignature}&signatureMessage=${signatureMessageForIdentityKey}` : `${this.rpcEndpoint}/identity-key/${walletAddress}?signature=${identitySignature}&signatureMessage=${signatureMessageForIdentityKey}&uid=${uid2}`\n            );\n            const identityKey = rpcResponse2.data.identityKey;\n            const signature = yield signer.signMessage(\n              `Enable identity on Divergent: ${identityKey}`\n            );\n            const secretKey = yield KMSUtils_default.aesGcmDecrypt(\n              encryptedSecretKey,\n              signature\n            );\n            return secretKey;\n          } catch (e) {\n            this.setError(\n              \"signRejected\",\n              \"User has rejected to provide the signature.\"\n            );\n          }\n        })\n      };\n      return opts[type](uid);\n    };\n    this._loginWithWallet = () => __async(this, null, function* () {\n      try {\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_10__.ethers.providers.Web3Provider(\n          window.ethereum\n        );\n        yield provider.send(\"eth_requestAccounts\", []);\n        const signer = yield provider.getSigner();\n        const walletAddress = yield signer.getAddress();\n        const signMessage = yield walletAuth._generateSignatureMessage(\n          walletAddress\n        );\n        const signature = yield signer.signMessage(signMessage);\n        yield this._handleAuth(walletAddress, signMessage, signature);\n        return;\n      } catch (e) {\n        this.setError(\n          \"signRejected\",\n          \"User has rejected to provide the signature.\"\n        );\n      }\n    });\n    this._loginWithLens = () => __async(this, null, function* () {\n      try {\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_10__.ethers.providers.Web3Provider(\n          window.ethereum\n        );\n        yield provider.send(\"eth_requestAccounts\", []);\n        const signer = yield provider.getSigner();\n        const walletAddress = yield signer.getAddress();\n        const signatureMessage = yield lensAuth.getSignatureMessage(\n          walletAddress\n        );\n        const signature = yield signer.signMessage(signatureMessage);\n        const tokens = yield lensAuth.getTokens(walletAddress, signature);\n        const uid = yield lensAuth.getHandle(walletAddress);\n        localStorage.setItem(\n          \"lensAccessToken\",\n          JSON.stringify({\n            accessToken: tokens.lensAccessToken,\n            refreshToken: tokens.lensRefreshToken\n          })\n        );\n        this.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_3__.io)(this.rpcEndpoint, {\n          auth: {\n            token: tokens.accessToken\n          }\n        });\n        this.start();\n        this._handleKMSAuth(uid);\n      } catch (e) {\n        this.setError(\n          \"signRejected\",\n          \"User has rejected to provide the signature.\"\n        );\n      }\n    });\n    this._handleAuth = (uid, signMessage, signature) => __async(this, null, function* () {\n      const tokens = yield walletAuth.verifySignature(\n        uid,\n        signMessage,\n        signature\n      );\n      this.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_3__.io)(this.rpcEndpoint, {\n        auth: {\n          token: tokens.accessToken\n        }\n      });\n      this.start();\n      this._handleKMSAuth(uid);\n    });\n    this._handleKMSAuth = (uid) => __async(this, null, function* () {\n      try {\n        const rpcResponse = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(`${this.rpcEndpoint}/${uid}`);\n        if (!rpcResponse.data.exists) {\n          const identityKey = yield KMSUtils_default.generateIdentityKey();\n          const provider = new ethers__WEBPACK_IMPORTED_MODULE_10__.ethers.providers.Web3Provider(\n            window.ethereum\n          );\n          yield provider.send(\"eth_requestAccounts\", []);\n          const signer = yield provider.getSigner();\n          const signature = yield signer.signMessage(\n            `Enable identity on Divergent: ${identityKey}`\n          );\n          const keys = yield verner_default.generateKeys(uid);\n          const encryptedSecretKey = yield KMSUtils_default.aesGcmEncrypt(\n            keys.secretKey,\n            signature\n          );\n          this.secretKey = keys.secretKey;\n          this.publicKey = keys.publicKey;\n          this.socket && this.socket.emit(\"@update-peer\", {\n            uid,\n            id: this.socket.id,\n            type: \"login\",\n            identityKey,\n            publicKey: keys.publicKey,\n            secretKey: encryptedSecretKey\n          });\n        } else {\n          this.secretKey = yield this._getUserKey(uid, \"secretKey\");\n          this.publicKey = yield this._getUserKey(uid, \"publicKey\");\n          this.socket && this.socket.emit(\"@update-peer\", {\n            uid,\n            id: this.socket.id,\n            type: \"login\"\n          });\n        }\n      } catch (e) {\n        this.setError(\n          \"signRejected\",\n          \"User has rejected to provide the signature.\"\n        );\n      }\n    });\n    this.init = (type) => __async(this, null, function* () {\n      logger_default.info({\n        type: \"login\",\n        message: \"Logging in user\"\n      });\n      if (type == \"wallet\")\n        yield this._loginWithWallet();\n      else if (type == \"lens\")\n        yield this._loginWithLens();\n      else\n        this._loginWithWallet();\n      return;\n    });\n    this.changeAvatar = (uid, avatarUrl) => __async(this, null, function* () {\n      logger_default.info({\n        type: `change-avatar`,\n        message: `Changing avatar for user`,\n        meta: uid\n      });\n      if (!this.socket) {\n        return;\n      }\n      this.socket.emit(\"@update-peer\", {\n        uid,\n        id: this.socket.id,\n        avatar: avatarUrl,\n        type: \"update\"\n      });\n    });\n    this.dial = (toId) => __async(this, null, function* () {\n      try {\n        logger_default.info({\n          type: `dial`,\n          message: `Dialing to a user`,\n          meta: {\n            to: toId,\n            from: this.getUser().uid\n          }\n        });\n        this.setCallerUid(toId);\n        yield this.enableAudioStream();\n        const peer = new simple_peer__WEBPACK_IMPORTED_MODULE_4__({\n          initiator: true,\n          trickle: false,\n          stream: this.getMicStream() ? this.getMicStream() : void 0\n        });\n        this.setPeer(peer);\n        peer.on(\"signal\", (data) => {\n          const user = this.getUser();\n          console.log(user);\n          if (!this.socket)\n            return;\n          this.socket.emit(\"@call\", {\n            peerToCall: toId,\n            signalData: data,\n            from: user.uid\n          });\n        });\n        peer.on(\"stream\", (stream) => {\n          console.log(stream);\n          this.setCallerStream(stream);\n        });\n        peer.on(\"data\", (data) => {\n          const decodedData = new TextDecoder().decode(data);\n          console.log(decodedData);\n        });\n        console.log(this.getPeer());\n        if (!this.socket)\n          return;\n        this.socket.on(\"answer\", (signal) => {\n          console.log(\"CALL ACCEPTED\", signal);\n          peer.signal(signal);\n        });\n        this.setConnection(peer);\n      } catch (e) {\n        logger_default.error({\n          type: `dial-error`,\n          message: `Unable to dial to user`,\n          meta: JSON.stringify(e)\n        });\n        return e;\n      }\n    });\n    this.answer = () => __async(this, null, function* () {\n      try {\n        logger_default.info({\n          type: `answer`,\n          messaging: `Answering call`\n        });\n        yield this.enableAudioStream();\n        const peer = new simple_peer__WEBPACK_IMPORTED_MODULE_4__({\n          initiator: false,\n          trickle: false,\n          stream: this.getMicStream() ? this.getMicStream() : void 0\n        });\n        this.setPeer(peer);\n        peer.on(\"signal\", (data) => {\n          var _a;\n          (_a = this.socket) == null ? void 0 : _a.emit(\"@answer\", {\n            signal: data,\n            to: this.getCallerUid()\n          });\n        });\n        peer.on(\"stream\", (stream) => {\n          console.log(stream);\n          this.setCallerStream(stream);\n        });\n        peer.on(\"data\", (message) => {\n          const decodedData = new TextDecoder().decode(message);\n          this.addSyncMessage(JSON.parse(decodedData));\n        });\n        peer.signal(this.getCallerSignal());\n        this.setConnection(peer);\n      } catch (e) {\n        logger_default.error({\n          type: `answer-error`,\n          messaging: `Failed to answer call`,\n          meta: JSON.stringify(e)\n        });\n        return e;\n      }\n    });\n    this.end = () => {\n      var _a;\n      (_a = this.socket) == null ? void 0 : _a.emit(\"@end\", { peerToEnd: this.getCallerUid() });\n      this.setConnection(null);\n      this.setPeer(null);\n      this.setCallerUid(\"\");\n      this.setCallerSignal(null);\n      this.setCallerStream(null);\n      this.disableAudioStream();\n    };\n    this.muteMic = () => __async(this, null, function* () {\n      const stream = this.getMicStream();\n      stream == null ? void 0 : stream.getAudioTracks().forEach((track) => {\n        track.enabled = !track.enabled;\n      });\n    });\n    this.unmuteMic = () => __async(this, null, function* () {\n      const stream = this.getMicStream();\n      stream == null ? void 0 : stream.getAudioTracks().forEach((track) => {\n        track.enabled = !track.enabled;\n      });\n    });\n    this.startConversation = (address) => {\n      var _a;\n      const p1 = this.getUser().uid;\n      const p2 = address;\n      (_a = this.socket) == null ? void 0 : _a.emit(\"@start-conversation\", { p1, p2 });\n    };\n    this.createGroup = (name) => {\n      var _a;\n      (_a = this.socket) == null ? void 0 : _a.emit(\"@create-group\", {\n        name,\n        creator: this.getUser().uid\n      });\n    };\n    this.leaveGroup = (groupId) => {\n      var _a;\n      (_a = this.socket) == null ? void 0 : _a.emit(\"@leave-group\", {\n        groupId,\n        participant: this.getUser().uid\n      });\n    };\n    this._getOtherPublicKey = (to, from) => __async(this, null, function* () {\n      var _a;\n      const participants = [to, from];\n      participants.sort();\n      const channelName = `${participants[0]}|${participants[1]}`;\n      const conversations = this.getConversations();\n      const messages = conversations[channelName];\n      if (messages.length === 0) {\n        const response = yield axios__WEBPACK_IMPORTED_MODULE_9__[\"default\"].get(`${this.rpcEndpoint}/public-key/${to}`);\n        return response.data.publicKey;\n      } else {\n        return (_a = messages[messages.length - 1].verner) == null ? void 0 : _a.keys[to];\n      }\n    });\n    this.sendMessageAsync = (payload, type) => __async(this, null, function* () {\n      var _a, _b;\n      logger_default.info({\n        type: `send-message`,\n        message: `Sending message`,\n        meta: {\n          to: payload.to,\n          from: payload.from\n        }\n      });\n      try {\n        if (type == \"conversation\") {\n          const participants = [payload.to, payload.from];\n          participants.sort();\n          const conversations = this.getConversations();\n          const channelName = `${participants[0]}|${participants[1]}`;\n          if (!conversations[channelName]) {\n            logger_default.error({\n              type: `send-message-no-convo`,\n              message: `Conversation not found for participants, please startConversation() first.`\n            });\n            return;\n          }\n          const nonce = yield verner_default.generateNonce();\n          this.addMessage(\n            channelName,\n            {\n              to: payload.to,\n              from: payload.from,\n              message: payload.message,\n              timestamp: payload.timestamp,\n              verner: {\n                keys: {\n                  [payload.from]: this.publicKey,\n                  [payload.to]: yield this._getOtherPublicKey(\n                    payload.to,\n                    payload.from\n                  )\n                },\n                nonce\n              }\n            },\n            \"conversation\"\n          );\n          const modifiedMessagePayload = {\n            to: payload.to,\n            from: payload.from,\n            message: payload.message,\n            timestamp: payload.timestamp,\n            verner: {\n              keys: {\n                [payload.from]: this.publicKey,\n                [payload.to]: yield this._getOtherPublicKey(\n                  payload.to,\n                  payload.from\n                )\n              },\n              nonce\n            }\n          };\n          if (this.secretKey) {\n            const encryptedMessage = yield verner_default.encryptMessage(\n              modifiedMessagePayload.message,\n              nonce,\n              modifiedMessagePayload.verner.keys[modifiedMessagePayload.to],\n              this.secretKey\n            );\n            modifiedMessagePayload.message = encryptedMessage;\n            (_a = this.socket) == null ? void 0 : _a.emit(\"@send-message\", {\n              payload: modifiedMessagePayload,\n              type: \"conversation\"\n            });\n          }\n        } else if (type == \"group\") {\n          this.addMessage(payload.to, payload, \"group\");\n          (_b = this.socket) == null ? void 0 : _b.emit(\"@send-message\", {\n            payload,\n            type: \"group\"\n          });\n        } else {\n          this.setError(\"sendError\", \"Secret Key not found in localstorage\");\n        }\n      } catch (e) {\n        console.log(e);\n        this.setError(\"sendError\", \"Unable to send Message.\");\n      }\n    });\n    this.addGroupParticipant = (groupId, participant) => {\n      var _a;\n      try {\n        logger_default.info({\n          type: `add-group-participant`,\n          message: `Adding participant ${participant} to group ${groupId}`\n        });\n        (_a = this.socket) == null ? void 0 : _a.emit(\"@update-group-participants\", {\n          participant,\n          groupId,\n          type: \"add\"\n        });\n      } catch (e) {\n        logger_default.error({\n          type: \"add-group-participant-error\",\n          message: `Unable to add participant ${participant}`\n        });\n      }\n    };\n    this.removeGroupParticipant = (groupId, participant) => {\n      var _a;\n      try {\n        logger_default.info({\n          type: `remove-group-participant`,\n          message: `Removing participant ${participant} to group ${groupId}`\n        });\n        (_a = this.socket) == null ? void 0 : _a.emit(\"@update-group-participants\", {\n          participant,\n          groupId,\n          type: \"remove\"\n        });\n      } catch (e) {\n        logger_default.error({\n          type: \"remove-group-participant-error\",\n          message: `Unable to remove participant ${participant}`\n        });\n      }\n    };\n    this.sendMessageSync = (msg) => {\n      try {\n        logger_default.info({\n          type: `sync-message`,\n          message: `Sending message via data channels`\n        });\n        const peer = this.getPeer();\n        if (!peer)\n          return;\n        peer.send(JSON.stringify(msg));\n      } catch (e) {\n        logger_default.error({\n          type: `sync-message-error`,\n          messaging: `Unable to send to peer`,\n          meta: JSON.stringify(e)\n        });\n        return e;\n      }\n    };\n    this.revealKeys = () => __async(this, null, function* () {\n      const uid = this.getUser().uid;\n      const publicKey = yield this._getUserKey(uid, \"publicKey\");\n      const secretKey = yield this._getUserKey(uid, \"secretKey\");\n      const keys = { publicKey, secretKey };\n      return keys;\n    });\n  }\n};\nvar DivergentClient_default = DivergentClient;\n\n// src/DivergentClient/index.tsx\nvar DivergentClientProvider = ({ children, value }) => {\n  const { getState: getState2 } = useRootStore_default;\n  DivergentClient_default.init(getState2);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_2__.createElement(DivergentClientContext.Provider, { value }, \" \", children, \" \");\n};\nvar DivergentClient_default2 = DivergentClientProvider;\n\n// src/hooks/index.ts\n\nvar useDivergentClient = () => (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(DivergentClientContext);\n\n// src/DivergentClient/hc.ts\nvar dc;\nvar createDivergentClient = (rpcEndpoint) => {\n  dc = new DivergentClient_default(rpcEndpoint);\n  return dc;\n};\nvar getDivergentClient = (rpcEndpoint) => {\n  if (!dc && rpcEndpoint)\n    createDivergentClient(rpcEndpoint);\n  return dc;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@huddle01/divergent-client/dist/index.mjs\n"));

/***/ })

});