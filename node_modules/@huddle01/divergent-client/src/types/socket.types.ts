import { Server, Socket } from "socket.io";
import { SignalData } from "simple-peer";
import { IMessage, IUserInfo } from "./common.types";
import { IErrorType, IGroup } from "../store/storeTypes";

export interface ServerToClientEvents {
  "update-peer": (data: IUserInfo) => void;
  call: (data: { signal: SignalData; from: string; fromUid: string }) => void;
  answer: (signal: SignalData) => void;
  "get-conversations": (conversation: {
    channel: string;
    messages: any;
    type: "conversation" | "group" | "remove";
  }) => void;
  "new-message-async": (data: {
    channel: string;
    message: IMessage;
    type: "conversation" | "group";
  }) => void;
  "end-call": (data: {}) => void;
  error: (data: { type: IErrorType; msg: string }) => void;
}

export interface ClientToServerEvents {
  "@update-peer": (data: {
    uid: string;
    id: string;
    type: string;
    avatar?: string;
    identityKey?: string;
    publicKey?: string;
    secretKey?: string;
  }) => void;
  "@call": (data: {
    peerToCall: string;
    signalData: SignalData;
    from: string;
  }) => void;
  "@answer": (data: { signal: SignalData; to?: string }) => void;
  "@start-conversation": (data: { p1: string; p2: string }) => void;
  "@send-message": (data: {
    payload: IMessage;
    type: "conversation" | "group";
  }) => void;
  "@create-group": (data: { name: string; creator: string }) => void;
  "@leave-group": (data: { name: string; participant: string }) => void;
  "@update-group-participants": (data: {
    participant: string;
    groupId: string;
    type: "add" | "remove";
  }) => void;
  "@get-conversations": (data: { uid: string }) => void;
  "@end": (data: { peerToEnd: string | undefined }) => void;
}

export type IOServerType = Server<ClientToServerEvents, ServerToClientEvents>;

export type ISocketType = Socket<ClientToServerEvents, ServerToClientEvents>;
