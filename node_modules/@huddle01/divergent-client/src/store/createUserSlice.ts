import {
  IUser,
  IUserInfo,
  IMessage,
  StoreSlice,
  IConversations,
  IGroup,
} from "./storeTypes";

const createUserSlice: StoreSlice<IUser> = (set, get) => ({
  user: {
    uid: "",
    socket: "",
    node: "",
    avatarUrl: "",
    messages: [],
  },
  connection: null,
  peer: null,
  conversations: {},
  groups: {},
  syncMessages: [],
  incorrectKeys: false,
  setUser: (user: IUserInfo) => set(() => ({ user: user })),
  setPeer: (peer: any) => set(() => ({ peer: peer })),
  setConnection: (peer: any) => set(() => ({ connection: peer })),
  setConversation: (channel: string, messages: IMessage[]) => {
    const prevConvo = get().conversations;
    prevConvo[channel] = messages;
    set(() => ({ conversations: prevConvo }));
  },
  setGroups: (id: string, group: any) => {
    const prevGroups = get().groups;
    prevGroups[id] = group;
    set(() => ({ groups: prevGroups }));
  },
  removeGroup: (id: string) => {
    const prevGroups = get().groups;
    delete prevGroups[id];
    set(() => ({ groups: prevGroups }));
  },
  setIncorrectKeys: (value: Boolean) => set(() => ({ incorrectKeys: value })),
  addMessage: (
    channel: string,
    message: IMessage,
    type: "conversation" | "group"
  ) => {
    if (type == "conversation") {
      const prevConversation = get().conversations;
      const messages = prevConversation[channel];
      messages.push(message);
      prevConversation[channel] = messages;
      set(() => ({ conversations: prevConversation }));
    } else {
      const prevConversation = get().groups;
      const groupMessages = prevConversation[channel];
      groupMessages.messages.push(message);
      prevConversation[channel] = groupMessages;
      set(() => ({ groups: prevConversation }));
    }
  },
  addSyncMessage: (message: IMessage) => {
    const syncMessages: IMessage[] = get().syncMessages;
    syncMessages.push(message);
    set(() => ({ syncMessages: syncMessages }));
  },
});

export default createUserSlice;
